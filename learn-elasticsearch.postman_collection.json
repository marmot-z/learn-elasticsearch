{
	"info": {
		"_postman_id": "44fc8ce7-60d0-4c05-8fd9-c658350e939f",
		"name": "learn-elasticsearch",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8461921"
	},
	"item": [
		{
			"name": "install",
			"item": [
				{
					"name": "get elasticsearch version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 验证 elasticsearch 是否启动成功",
									"pm.test('elasticsearch start successful', function() {",
									"    let body = pm.response.json();",
									"    let version = pm.collectionVariables.get('esVersion');",
									"",
									"    return pm.response.status == 200 &&",
									"            body.version.name === version;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let body = pm.request.body.raw;",
									"",
									"console.log(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{esHost}}",
							"host": [
								"{{esHost}}"
							]
						},
						"description": "### install elasticsearch\n\n-通过 [start.sh](../start.sh) 在 docker 中启动 ElasticSearch，然后发送 `get elasticsearch version` 请求，观察 Tests  是否成功。"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "document",
			"item": [
				{
					"name": "create document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let getDocumentById = eval(pm.globals.get(\"getDocumentById\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"let body = pm.response.json();",
									"",
									"asyncSeries([",
									"    (cb) => getDocumentById({indexName: 'users',id: 1}, cb),",
									"    (cb) => deleteIndex('users', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    pm.test('create document successful', function() {",
									"        pm.expect(results[0]._id).eq('1');",
									"        pm.expect(results[0].found).eq(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"Mike\",\n    \"post_date\": \"2019-04-15T14:12:12\",\n    \"message\": \"trying out kibana\"\n}"
						},
						"url": {
							"raw": "{{esHost}}/users/_doc/1",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"users",
								"_doc",
								"1"
							]
						},
						"description": "### create document\n\n演示如何创建文档，如果文档对应的索引不存在，则根据文档内容自动推导索引字段类型进行创建"
					},
					"response": []
				},
				{
					"name": "index document",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"",
									"asyncSeries([",
									"    (cb) => createDocument({",
									"        indexName: 'users',",
									"        doc: {",
									"            \"user\": \"Mike\",",
									"            \"post_date\": \"2019-04-15T14:12:12\",",
									"            \"message\": \"trying out kibana\"",
									"        },",
									"        id: 1",
									"    }, cb)",
									"], (err, res) => {",
									"    if (err) throw err;",
									"",
									"    console.log(`创建文档 ${res ? '成功' : '失败'}`);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let getDocumentById = eval(pm.globals.get(\"getDocumentById\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"",
									"asyncSeries([",
									"    (cb) => getDocumentById({indexName: 'users',id: 1}, cb),",
									"    (cb) => deleteIndex('users', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    let doc = results[0];",
									"",
									"    pm.test('index document successful', function() {",
									"        pm.expect(doc._version).eq(2);",
									"        pm.expect(doc._source.user).eq('Lucy');",
									"        // 不保留文档原先字段内容",
									"        pm.expect(doc._source.message).is.undefined;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"Lucy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{esHost}}/users/_doc/1",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"users",
								"_doc",
								"1"
							]
						},
						"description": "### index document\n\nindex 作用：\n\n- 如果文档不存在，则创建文档\n- 如果文档存在，则删除旧文档，然后创建新文档，并将_version +1\n    \nindex 与 update 区别：index 会覆盖原先的文档，而 update 只会更新部分字段"
					},
					"response": []
				},
				{
					"name": "update document",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"",
									"asyncSeries([",
									"    (cb) => createDocument({",
									"        indexName: 'users',",
									"        doc: {",
									"            \"user\": \"Mike\",",
									"            \"post_date\": \"2019-04-15T14:12:12\",",
									"            \"message\": \"trying out kibana\"",
									"        },",
									"        id: 1",
									"    }, cb)",
									"], (err, res) => {",
									"    if (err) throw err;",
									"",
									"    console.log(`创建文档 ${res ? '成功' : '失败'}`);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let getDocumentById = eval(pm.globals.get(\"getDocumentById\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"",
									"asyncSeries([",
									"    (cb) => getDocumentById({indexName: 'users',id: 1}, cb),",
									"    (cb) => deleteIndex('users', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    let doc = results[0];",
									"",
									"    pm.test('update document successful', function() {",
									"        pm.expect(doc._version).eq(2);",
									"        pm.expect(doc._source.user).eq('Lucy');",
									"        // 保留文档原先字段内容",
									"        pm.expect(doc._source.message).eq('trying out kibana');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"doc\": {\n        \"user\": \"Lucy\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{esHost}}/users/_update/1",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"users",
								"_update",
								"1"
							]
						},
						"description": "### update document\nupdate 只会更新文档对应的字段，其他未更新的字段内容不会变化，并将 _version +1"
					},
					"response": []
				},
				{
					"name": "get document",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"",
									"asyncSeries([",
									"    (cb) => createDocument({",
									"        indexName: 'users',",
									"        doc: {",
									"            \"user\": \"Mike\",",
									"            \"post_date\": \"2019-04-15T14:12:12\",",
									"            \"message\": \"trying out kibana\"",
									"        },",
									"        id: 1",
									"    }, cb)",
									"], (err, res) => {",
									"    if (err) throw err;",
									"",
									"    console.log(`创建文档 ${res ? '成功' : '失败'}`);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"let body = pm.response.json();",
									"",
									"asyncSeries([",
									"    (cb) => deleteIndex('users', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    pm.test('get document(1) successful', function() {",
									"        pm.expect(body.found).eq(true);",
									"        pm.expect(body._source.user).eq('Mike');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{esHost}}/users/_doc/1",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"users",
								"_doc",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete document",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"",
									"asyncSeries([",
									"    (cb) => createDocument({",
									"        indexName: 'users',",
									"        doc: {",
									"            \"user\": \"Mike\",",
									"            \"post_date\": \"2019-04-15T14:12:12\",",
									"            \"message\": \"trying out kibana\"",
									"        },",
									"        id: 1",
									"    }, cb)",
									"], (err, res) => {",
									"    if (err) throw err;",
									"",
									"    console.log(`创建文档 ${res ? '成功' : '失败'}`);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let getDocumentById = eval(pm.globals.get(\"getDocumentById\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"",
									"asyncSeries([",
									"    (cb) => getDocumentById({indexName: 'users',id: 1}, cb),",
									"    (cb) => deleteIndex('users', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    let doc = results[0];",
									"",
									"    pm.test('delete document successful', function() {",
									"        // document 1 not found",
									"        pm.expect(doc.found).eq(false);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{esHost}}/users/_doc/1",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"users",
								"_doc",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "msearch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"let loadDatas = eval(pm.globals.get(\"loadDatas\"));",
									"",
									"let docs = {",
									"    'test1': [",
									"        {'id': 1, 'tag': 'blogging', 'content': 'we bought a house, so I was moving'},",
									"        {'id': 2, 'tag': 'job', 'message': 'learning to get better at by job'},",
									"        {'id': 3, 'tag': 'programming', 'message': 'I feel I should have at my job level'}",
									"    ],",
									"    'test2': [",
									"        {id: 1, autor: 'john', comments: ['good', 'bad']},",
									"        {id: 2, autor: 'tom', comments: ['pretty good', 'normal']},",
									"    ]",
									"};      ",
									"",
									"loadDatas(docs, (err, resp) => {",
									"    if (err) throw err;",
									"",
									"    console.log('数据创建完毕');",
									"    ",
									"// 数据创建完后等待 1000 ms 再查询",
									"}, 1000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"let body = pm.response.json();",
									"",
									"asyncSeries([",
									"    cb => deleteIndex('test1', cb),",
									"    cb => deleteIndex('test2', cb)",
									"], (err, res) => {",
									"    if (err) throw err;",
									"",
									"    pm.test('mulit search successful', () => {",
									"        // 验证 test1 索引 term 精确查询成功",
									"        pm.expect(body.responses[0].hits.hits[0]._source.id).eq(1);",
									"        pm.expect(body.responses[0].hits.hits[0]._source.tag).eq('blogging');",
									"",
									"        // 验证 test1 索引 match 匹配查询成功",
									"        pm.expect(body.responses[1].hits.hits[0]._source.id).eq(2);",
									"        pm.expect(body.responses[1].hits.hits[0]._source.message.startsWith('learning')).to.be.true;",
									"",
									"        // 验证 test2 索引全部查询成功",
									"        pm.expect(body.responses[2].hits.hits.length).eq(2);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-ndjson",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}\n{\"query\":{\"term\":{\"tag.keyword\":\"blogging\"}}}\n{}\n{\"query\":{\"match\":{\"message\":\"learning\"}}}\n{\"index\":\"test2\"}\n{\"query\":{\"match_all\":{}}}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{esHost}}/test1/_msearch",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"test1",
								"_msearch"
							]
						},
						"description": "### multi search\n\nmsearch 可以在一个请求中进行多个查询，其请求格式如下：\n```\nGET /_search\nheader\\n\nbody\\n\nheader\\n\nbody\\n\n```\n请求内容中每一行由换行符分隔（包括最后一行），请求头 `Content-type` 为 `application/x-ndjson`\n\n\n1.  target_index 是查询目标索引，当查询 header 为空则默认使用此索引。其支持使用通配符，也可以为空;\n2.  header 可以进行一些查询的配置，如：\n    -   index 指定查询索引\n    -   routing 指定路由\n    -   search_type 查询类型（使用本地还是全局的 term 和文档频率进行算分）\n    -   ...\n3.  body 记录查询参数：\n    -   aggregation 聚合方式\n    -   query 查询参数，同一般查询 DSL\n    -   from 分页起点\n    -   size 分页大小\n\n更多详情请参阅官方文档 [https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-multi-search.html](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-multi-search.html)"
					},
					"response": []
				},
				{
					"name": "bulk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let getDocumentById = eval(pm.globals.get(\"getDocumentById\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"let body = pm.response.json();",
									"",
									"asyncSeries([",
									"    (cb) => getDocumentById({indexName: 'test', id: 1}, cb),",
									"    (cb) => getDocumentById({indexName: 'test', id: 3}, cb),",
									"    (cb) => deleteIndex('test', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    let doc1 = results[0];",
									"    let doc2 = results[1];",
									"",
									"    pm.test('bulk successful', function() {",
									"        // 创建文档 1 成功并更新",
									"        pm.expect(doc1.found).eq(true);",
									"        pm.expect(doc1._version).eq(2);",
									"        pm.expect(doc1._source.field1).eq('value1');",
									"        pm.expect(doc1._source.field2).eq('value2');",
									"        // 创建文档 3 成功",
									"        pm.expect(doc2.found).eq(true);",
									"",
									"        // 创建文档 1 成功",
									"        pm.expect(body.items[0].index.result).eq('created');",
									"        // 删除文档 2 失败（文档 2 不存在），该操作失败不影响其他操作",
									"        pm.expect(body.items[1].delete.result).eq('not_found');",
									"        // 创建文档 3 成功",
									"        pm.expect(body.items[2].create.result).eq('created');",
									"        // 更新文档 1 成功",
									"        pm.expect(body.items[3].update.result).eq('updated');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"index\" : { \"_index\" : \"test\", \"_id\" : \"1\" } }\n{ \"field1\" : \"value1\" }\n{ \"delete\" : { \"_id\" : \"2\" } }\n{ \"create\" : { \"_id\" : \"3\" } }\n{ \"field1\" : \"value3\" }\n{ \"update\" : {\"_id\" : \"1\"} }\n{ \"doc\" : {\"field2\" : \"value2\"} }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{esHost}}/test/_bulk",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"test",
								"_bulk"
							]
						},
						"description": "### bulk \nbulk 能同时执行多条命令\n- 部分命令报错不会影响另一部分命令的执行\n- 每条命令使用 \\n 分隔（最后一条命令也要使用 \\n 结尾）\n- 可以指定默认目标索引，没有 _index 参数的命令会使用默认目标索引\n\n官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-bulk.html"
					},
					"response": []
				},
				{
					"name": "mget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"let body = pm.response.json();",
									"let indexs = ['test1', 'test2', 'test3', 'test4'];",
									"",
									"asyncSeries(",
									"    indexs.map(index => cb => deleteIndex(index, cb)),",
									"    (err, results) => {",
									"        if (err) throw err;",
									"",
									"        pm.test('multi get successful', function() {",
									"            // 验证获取默认索引文档",
									"            pm.expect(body.docs[0].found).eq(true);",
									"            pm.expect(body.docs[0]._source.id).eq(1);",
									"            // 验证获取指定索引文档",
									"            pm.expect(body.docs[1].found).eq(true);",
									"            pm.expect(body.docs[1]._source.id).eq(1);",
									"            // 验证获取指定字段",
									"            pm.expect(body.docs[2].found).eq(true);",
									"            pm.expect(body.docs[2]._source.id).eq(2);",
									"            pm.expect(body.docs[2]._source.age).is.undefined;",
									"            // 验证获取文档失败（文档不存在）",
									"            pm.expect(body.docs[3].found).eq(false);",
									"        });",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"let docs = {",
									"    \"test1\": {id: 1, name: \"zhangsan\", age: 18},",
									"    \"test2\": {id: 1, date: '2022-09-21', count: 2},",
									"    \"test3\": {id: 2, name: 'lisi', age: 29},",
									"    \"test4\": {id: 2, date: '2022-09-23', count: 3}",
									"};",
									"",
									"// 创建多个索引多条数据",
									"asyncSeries(",
									"    Object.entries(docs)",
									"    .map(([k, v]) => ",
									"        (cb) => createDocument({",
									"            indexName: k,",
									"            doc: v,",
									"            id: v.id",
									"        }, cb)",
									"    ), ",
									"    (err, res) => {",
									"        if (err) throw err;",
									"",
									"        console.log('数据已创建');",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"docs\": [\n        {\n            \"_id\": 1\n        },\n        {\n            \"_id\": 1,\n            \"_index\": \"test2\"\n        },\n        {\n            \"_id\": 2,\n            \"_index\": \"test3\",\n            \"_type\": \"_doc\",\n            \"_source\": [\"id\", \"name\"]\n        },\n        {\n            \"_id\": 3,\n            \"_index\": \"test4\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{esHost}}/test1/_mget/",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"test1",
								"_mget",
								""
							]
						},
						"description": "### multi get\n\nmulti get 可以同时获取多条数据\n\n- 指定默认索引\n`GET /test/_mget`  \n- 使用 ids 查询指定 id 的数据  \n```\nGET /test/_mget\n{\n   \"ids\": [\"1\", \"2\"]\n}\n```\n- 使用 docs 获取指定文档\n    - 使用 _source 指定返回字段  \n    - 使用 _index 指定返回字段\n\n官方文档：[https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-multi-get.html](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-multi-get.html)"
					},
					"response": []
				}
			],
			"description": "演示如何文档的增删改查：\n\n- 增加(create document)  \n- index(index document)  \n- 更新(update document)  \n- 获取(get document)  \n- 删除(delete document)  \n- 批量操作(bulk)  \n- 批量获取(multi get)  \n- 批量查询(multi search)"
		},
		{
			"name": "index",
			"item": [
				{
					"name": "index management",
					"item": [
						{
							"name": "get index",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"let createIndex = eval(pm.globals.get(\"createIndex\"));",
											"let options = {",
											"    \"indexName\": \"my-index-000001\",",
											"    \"settings\": {",
											"        \"index\": {",
											"            \"number_of_shards\": 1,",
											"            \"number_of_replicas\": 2",
											"        }",
											"    },",
											"    \"mappings\": {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"text\"",
											"            },",
											"            \"tags\": {",
											"                \"type\": \"keyword\"",
											"            }",
											"        }",
											"    },",
											"    \"aliases\": {",
											"        \"index01-middle\": {",
											"            \"filter\": {",
											"                \"term\": {",
											"                    \"tags\": \"middle\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    resp[0] && console.log('索引已创建');",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const indexName = 'my-index-000001';",
											"let body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => deleteIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    pm.test('get index successful', () => {",
											"        pm.expect(body[indexName]).to.be.exist;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{esHost}}/my-index-000001",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001"
									]
								}
							},
							"response": []
						},
						{
							"name": "open index",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('hello');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('world');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{esHost}}/test1/_open",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"test1",
										"_open"
									]
								}
							},
							"response": []
						},
						{
							"name": "create index",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"let getIndex = eval(pm.globals.get(\"getIndex\"));",
											"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"let body = pm.response.json();",
											"const indexName = 'my-index-000001';",
											"",
											"asyncSeries([",
											"    cb => getIndex(indexName, cb),",
											"    cb => deleteIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let indexInfo = resp[0];",
											"",
											"    pm.test('create index successful', () => {",
											"        // 验证索引创建成功",
											"        pm.expect(body.acknowledged).to.be.true;",
											"",
											"        // 验证索引 mappings 是否正确",
											"        pm.expect(indexInfo[indexName].mappings.properties.id.type).eq('integer');",
											"",
											"        // 验证索引 settings 是否正确",
											"        pm.expect(indexInfo[indexName].settings.index.number_of_shards).eq('1');",
											"        pm.expect(indexInfo[indexName].settings.index.number_of_replicas).eq('2');",
											"",
											"        // 验证索引 alias 是否正确",
											"        pm.expect(indexInfo[indexName].aliases['index01-middle']).to.be.exist;",
											"        pm.expect(indexInfo[indexName].aliases['index01-middle'].filter.term.tags).eq('middle');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"settings\": {\n        \"index\": {\n            \"number_of_shards\": 1,\n            \"number_of_replicas\": 2\n        }\n    },\n    \"mappings\": {\n        \"properties\": {\n            \"id\": {\n                \"type\": \"integer\"\n            },\n            \"name\": {\n                \"type\": \"text\"\n            },\n            \"tags\": {\n                \"type\": \"keyword\"\n            }\n        }\n    },\n    \"aliases\": {\n        \"index01-middle\": {\n            \"filter\": {\n                \"term\": {\n                    \"tags\": \"middle\"\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/my-index-000001",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001"
									]
								},
								"description": "### create index\n\n创建索引请求格式如下：\n\n```\nPUT /my-index-000001\n{\n  \"settings\": {\n    \"index\": {\n      \"number_of_shards\": 3,  \n      \"number_of_replicas\": 2 \n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"field1\": { \"type\": \"text\" }\n    }\n  }\n  \"aliases\": {\n    \"alias_1\": {},\n    \"alias_2\": {\n      \"filter\": {\n        \"term\": { \"user.id\": \"kimchy\" }\n      },\n      \"routing\": \"shard-1\"\n    }\n  }\n}\n\n```\n\n索引名称需符合以下要求：\n\n- 只能小写  \n- 不能包含右侧字符：, /, \\*, ?, \", <, >, |, (space character), ,, #  \n- 不能以 -,_,+ 符号起始  \n- 不能为 . 或者 ..  \n- 不能超过 255 字节  \n- 不能以 . 符号起始\n\n查询参数：\n\n- wait_for_active_shards 在发起请求前等待有效的分片数，可以为 all 或者\\[1, number_of_replicas + 1\\]  \n- master_timeout 连接到主节点的超时时间，默认为 30s  \n- timeout 响应超时时间\n\n请求体：\n\n- [aliases](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/aliases.html)\n- [mappings](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/mapping.html)\n- [settings](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/index-modules.html#index-modules-settings)\n\n官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-create-index.html"
							},
							"response": []
						},
						{
							"name": "delete index",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"let createIndex = eval(pm.globals.get(\"createIndex\"));",
											"let options = {",
											"    \"indexName\": \"my-index-000001\"",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    resp[0] && console.log('索引已创建');",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const getIndex = eval(pm.globals.get(\"getIndex\"));",
											"const indexName = 'my-index-000001';",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => getIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let indexInfo = resp[0];",
											"",
											"    pm.test('delete index successful', () => {",
											"        pm.expect(body.acknowledged).to.be.true;",
											"        ",
											"        // 验证索引已被删除",
											"        pm.expect(indexInfo.status).eq(404);",
											"        pm.expect(indexInfo.error.type).eq('index_not_found_exception');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{esHost}}/my-index-000001",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001"
									]
								}
							},
							"response": []
						},
						{
							"name": "clone index",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"const options = {",
											"    \"indexName\": \"my-index-000001\",",
											"    \"settings\": {",
											"        \"index\": {",
											"            \"number_of_shards\": 1,",
											"            \"number_of_replicas\": 2,",
											"            \"blocks.write\": true",
											"        }",
											"    },",
											"    \"mappings\": {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"text\"",
											"            },",
											"            \"tags\": {",
											"                \"type\": \"keyword\"",
											"            }",
											"        }",
											"    },",
											"    \"aliases\": {",
											"        \"index01-middle\": {",
											"            \"filter\": {",
											"                \"term\": {",
											"                    \"tags\": \"middle\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    resp[0] && console.log('索引已创建');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const getIndex = eval(pm.globals.get(\"getIndex\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const cloneIndexName = 'cloned-my-index-000001';",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => getIndex(cloneIndexName, cb),",
											"    cb => deleteIndex('my-index-000001', cb),",
											"    cb => deleteIndex(cloneIndexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let cloneIndexInfo = resp[0];",
											"",
											"    pm.test('clone index successful', () => {",
											"        pm.expect(body.acknowledged).to.be.true;",
											"        // 验证索引拷贝成功",
											"        pm.expect(cloneIndexInfo[cloneIndexName]).to.be.exist;",
											"        // 验证目标索引 aliases 创建成功",
											"        pm.expect(cloneIndexInfo[cloneIndexName].aliases['clone-index01-high']).to.be.exist;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"settings\": {\n        \"index\": {\n            \"number_of_shards\": 1,\n            \"number_of_replicas\": 2\n        }\n    },\n    \"aliases\": {\n        \"clone-index01-high\": {\n            \"filter\": {\n                \"term\": {\n                    \"tags\": \"high\"\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/my-index-000001/_clone/cloned-my-index-000001",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001",
										"_clone",
										"cloned-my-index-000001"
									]
								},
								"description": "### clone index\n\nclone index 可以拷贝已有索引生成新的索引\n\n#### 拷贝前提要求\n\n- 目标索引不存在  \n- 目标索引和源索引分片数一致  \n- 处理拷贝索引的节点有足够的磁盘空间完成已有索引的拷贝\n\n#### 说明\n\n- 索引模板不会应用于目标索引  \n- 目标索引不会拷贝源索引的元信息(metadata)  \n- 拷贝会赋值绝大部分源索引配置到目标索引中，但 index.number_of_replicas 和 index.auto_expand_replicas 配置除外，可以在 clone 请求中指定此参数\n\n#### 拷贝流程\n\n- unassigned 各分片尚未分配  \n- initializing 主分片已分配  \n- active 主分片拷贝完成，es 将尝试拷贝分片副本和将主分片重定位到其他节点\n\n可以使用 _cat recovery API 查看进度\n\n#### 请求参数：\n\n与 create index 参数类似，可以在请求体中指定 settings 和 aliases 参数，但不能指定 mapping 参数\n\n官方文档：[https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-clone-index.html](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-clone-index.html)"
							},
							"response": []
						},
						{
							"name": "close index",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"const options = {",
											"    \"indexName\": \"my-index-000001\",",
											"    \"settings\": {",
											"        \"index\": {",
											"            \"number_of_shards\": 1,",
											"            \"number_of_replicas\": 2",
											"        }",
											"    },",
											"    \"mappings\": {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"text\"",
											"            },",
											"            \"tags\": {",
											"                \"type\": \"keyword\"",
											"            }",
											"        }",
											"    },",
											"    \"aliases\": {",
											"        \"index01-middle\": {",
											"            \"filter\": {",
											"                \"term\": {",
											"                    \"tags\": \"middle\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"let getIndexStatus = eval(pm.globals.get(\"getIndexStatus\"));",
											"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const indexName = 'my-index-000001';",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => getIndexStatus(indexName, cb),",
											"    cb => deleteIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let indexStatus = resp[0];",
											"",
											"    pm.test('close index successful', () => {",
											"        pm.expect(body.indices[indexName].closed).is.to.true;",
											"",
											"        // 验证索引状态为 close",
											"        pm.expect(indexStatus).is.contain('close');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{esHost}}/my-index-000001/_close",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001",
										"_close"
									]
								},
								"description": "### close index\n```\nPOST /my-index-000001/_close\n```\n你可以使用 close API 关闭索引，其会阻塞索引上的读写操作，以及不允许任何可以在正常状态索引上的操作。关闭的索引不会维护内部数据结构用于保存和查询文档，其会降低集群的消耗。\n当启动/关闭索引时，分片会执行恢复流程，以确保集群始终保留足够的分片副本。\n关闭索引会消耗大量的磁盘空间，可能会引起一些问题。\n\n官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-close.html"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let getIndexStatus = (indexName, callback) => {",
									"    pm.sendRequest({",
									"        url: `${pm.collectionVariables.get('esHost')}/_cat/indices/${indexName}?h=status`,",
									"        method: 'GET',",
									"    }, (err, resp) => {",
									"        if (err) return callback(err);",
									"",
									"        callback(null, resp.text());",
									"    });",
									"};",
									"",
									"let closeIndex = (indexName, callback) => {",
									"",
									"};",
									"",
									"postman.setGlobalVariable('getIndexStatus', getIndexStatus);",
									"postman.setGlobalVariable('closeIndex', closeIndex);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "mapping management",
					"item": []
				}
			],
			"description": "### index operations\n\n演示索引相关的操作:\n\n- 创建索引(create index)\n- 获取索引(get index)\n- 删除索引(delete index)\n- 拷贝索引(clone index)\n- 关闭索引(close index)\n- 开启索引(open index)\n- 获取索引设置(get index setting)\n- 更新索引设置(update index setting)\n- 获取索引映射(get index mapping)\n- 更新索引映射(update index mapping)\n- 获取索引(多个)统计(get index stats)\n- 创建别名(create alias)\n- 获取别名(get alias)\n- 删除别名(delete alias)\n- 创建/更新索引模板(create or update index template)\n- 获取索引模板(get index template)\n- 删除索引模板(delete index template)\n- 分词器使用(analyze usage)"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const elasticsearchHost = 'http://localhost:9200';",
					"const elasticsearchVersion = '7.17.0';",
					"",
					"// set global varibales",
					"pm.collectionVariables.set('esHost', elasticsearchHost);",
					"pm.collectionVariables.set('esVersion', elasticsearchVersion);",
					"",
					"// set default header",
					"pm.request.headers.add({key: 'Content-type', value: 'application/json'});",
					"",
					"// global functions",
					"// see also: https://www.postman.com/postman/workspace/postman-answers/request/3407886-06011115-e3cf-4711-926c-55a417d530f1",
					"let asyncSeries = (tasks, cb = () => {}) => {",
					"    let _series = function(tasks, cb, currOperation = 0, results = []) {",
					"        // Bail-out condition",
					"        if (currOperation === tasks.length) {",
					"            return cb(null, results);",
					"        }",
					"",
					"        if (typeof tasks[currOperation] !== 'function') {",
					"            return cb(new Error('asyncSeries: Please provide a function'));",
					"        }",
					"",
					"        tasks[currOperation]((err, res) => {",
					"            if (err) {",
					"                return cb(err);",
					"            }",
					"",
					"            results.push(res);",
					"            ",
					"            return _series(tasks, cb, currOperation + 1, results);",
					"        });",
					"    }",
					"",
					"    return _series(tasks, cb);",
					"};",
					"",
					"let deleteIndex = (indexName, callback) => {",
					"   pm.sendRequest({",
					"        url: `${pm.collectionVariables.get('esHost')}/${indexName}`,",
					"        method: 'DELETE'",
					"    }, (err, resp) => {",
					"        if (err) return callback(err);",
					"",
					"        let body = resp.json();",
					"",
					"        callback(",
					"            body.acknowledged ? ",
					"                null : ",
					"                new Error(`${indexName} 索引删除失败`),",
					"            body.acknowledged",
					"        );",
					"    });",
					"};",
					"",
					"let createIndex = (options, callback) => {",
					"    let indexName = options.indexName;",
					"    delete options.indexName;",
					"",
					"    pm.sendRequest({",
					"        url: `${pm.collectionVariables.get('esHost')}/${indexName}`,",
					"        method: 'PUT',",
					"        header: {",
					"            'Content-Type': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify(options)",
					"        }",
					"    }, (err, resp) => {",
					"        if (err) return callback(err);",
					"",
					"        let body = resp.json();",
					"",
					"        callback(",
					"            body.acknowledged ? ",
					"                null : ",
					"                new Error(`${indexName} 索引创建失败`),",
					"            body.acknowledged",
					"        );",
					"    });",
					"};",
					"",
					"let getIndex = (indexName, callback) => {",
					"    pm.sendRequest({",
					"        url: `${pm.collectionVariables.get('esHost')}/${indexName}`,",
					"        method: 'GET'",
					"    }, (err, resp) => {",
					"        if (err) return callback(err);",
					"",
					"        callback(null, resp.json());",
					"    });",
					"};",
					"",
					"let createDocument = (options, callback) => {",
					"    pm.sendRequest({",
					"        url: `${pm.collectionVariables.get('esHost')}/${options.indexName}/_doc/${options.id ? options.id : ''}`,",
					"        method: 'POST',",
					"        header: {",
					"            'Content-Type': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify(options.doc)",
					"        }",
					"    }, (err, resp) => {",
					"        if (err) return callback(err);",
					"",
					"        let body = resp.json();",
					"",
					"        callback(null, body.result === 'created');",
					"    });",
					"};",
					"",
					"let getDocumentById = (options, callback) => {",
					"    pm.sendRequest({",
					"        url: `${pm.collectionVariables.get('esHost')}/${options.indexName}/_doc/${options.id}`,",
					"        method: 'GET',",
					"    }, (err, resp) => {",
					"        if (err) return callback(err);",
					"",
					"        callback(null, resp.json());",
					"    });",
					"};",
					"",
					"let loadDatas = (datas, callback, sleepmillis) => {",
					"    let tasks = Object.entries(datas)",
					"        .flatMap(([k, v]) => ",
					"            v.map(data => ",
					"                _cb => createDocument({indexName: k, doc: data}, _cb)",
					"            )",
					"        );",
					"",
					"    // 部分数据创建后需等待若干毫秒后才可以被查询到",
					"    if (sleepmillis && sleepmillis > 0) {",
					"        tasks.push(_cb => setTimeout(_cb, sleepmillis));",
					"    }",
					"",
					"    asyncSeries(tasks, callback);",
					"};",
					"",
					"// set global function",
					"postman.setGlobalVariable('asyncSeries', asyncSeries);",
					"postman.setGlobalVariable('createIndex', createIndex);",
					"postman.setGlobalVariable('getIndex', getIndex);",
					"postman.setGlobalVariable('deleteIndex', deleteIndex);",
					"postman.setGlobalVariable('createDocument', createDocument);",
					"postman.setGlobalVariable('getDocumentById', getDocumentById);",
					"postman.setGlobalVariable('loadDatas', loadDatas);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "esHost",
			"value": ""
		},
		{
			"key": "esVersion",
			"value": ""
		}
	]
}