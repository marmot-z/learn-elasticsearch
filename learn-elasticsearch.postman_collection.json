{
	"info": {
		"_postman_id": "44fc8ce7-60d0-4c05-8fd9-c658350e939f",
		"name": "learn-elasticsearch",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8461921"
	},
	"item": [
		{
			"name": "install",
			"item": [
				{
					"name": "get elasticsearch version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 验证 elasticsearch 是否启动成功",
									"pm.test('elasticsearch start successful', function() {",
									"    let body = pm.response.json();",
									"    let version = pm.collectionVariables.get('esVersion');",
									"",
									"    return pm.response.status == 200 &&",
									"            body.version.name === version;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let body = pm.request.body.raw;",
									"",
									"console.log(body);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{esHost}}",
							"host": [
								"{{esHost}}"
							]
						},
						"description": "### install elasticsearch\n\n-通过 [start.sh](../start.sh) 在 docker 中启动 ElasticSearch，然后发送 `get elasticsearch version` 请求，观察 Tests  是否成功。"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "document",
			"item": [
				{
					"name": "create document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let getDocumentById = eval(pm.globals.get(\"getDocumentById\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"let body = pm.response.json();",
									"",
									"asyncSeries([",
									"    (cb) => getDocumentById({indexName: 'users',id: 1}, cb),",
									"    (cb) => deleteIndex('users', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    pm.test('create document successful', function() {",
									"        pm.expect(results[0]._id).eq('1');",
									"        pm.expect(results[0].found).eq(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"Mike\",\n    \"post_date\": \"2019-04-15T14:12:12\",\n    \"message\": \"trying out kibana\"\n}"
						},
						"url": {
							"raw": "{{esHost}}/users/_doc/1",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"users",
								"_doc",
								"1"
							]
						},
						"description": "### create document\n\n演示如何创建文档，如果文档对应的索引不存在，则根据文档内容自动推导索引字段类型进行创建"
					},
					"response": []
				},
				{
					"name": "index document",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"",
									"asyncSeries([",
									"    (cb) => createDocument({",
									"        indexName: 'users',",
									"        doc: {",
									"            \"user\": \"Mike\",",
									"            \"post_date\": \"2019-04-15T14:12:12\",",
									"            \"message\": \"trying out kibana\"",
									"        },",
									"        id: 1",
									"    }, cb)",
									"], (err, res) => {",
									"    if (err) throw err;",
									"",
									"    console.log(`创建文档 ${res ? '成功' : '失败'}`);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let getDocumentById = eval(pm.globals.get(\"getDocumentById\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"",
									"asyncSeries([",
									"    (cb) => getDocumentById({indexName: 'users',id: 1}, cb),",
									"    (cb) => deleteIndex('users', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    let doc = results[0];",
									"",
									"    pm.test('index document successful', function() {",
									"        pm.expect(doc._version).eq(2);",
									"        pm.expect(doc._source.user).eq('Lucy');",
									"        // 不保留文档原先字段内容",
									"        pm.expect(doc._source.message).is.undefined;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"Lucy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{esHost}}/users/_doc/1",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"users",
								"_doc",
								"1"
							]
						},
						"description": "### index document\n\nindex 作用：\n\n- 如果文档不存在，则创建文档\n- 如果文档存在，则删除旧文档，然后创建新文档，并将_version +1\n    \nindex 与 update 区别：index 会覆盖原先的文档，而 update 只会更新部分字段"
					},
					"response": []
				},
				{
					"name": "update document",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"",
									"asyncSeries([",
									"    (cb) => createDocument({",
									"        indexName: 'users',",
									"        doc: {",
									"            \"user\": \"Mike\",",
									"            \"post_date\": \"2019-04-15T14:12:12\",",
									"            \"message\": \"trying out kibana\"",
									"        },",
									"        id: 1",
									"    }, cb)",
									"], (err, res) => {",
									"    if (err) throw err;",
									"",
									"    console.log(`创建文档 ${res ? '成功' : '失败'}`);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let getDocumentById = eval(pm.globals.get(\"getDocumentById\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"",
									"asyncSeries([",
									"    (cb) => getDocumentById({indexName: 'users',id: 1}, cb),",
									"    (cb) => deleteIndex('users', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    let doc = results[0];",
									"",
									"    pm.test('update document successful', function() {",
									"        pm.expect(doc._version).eq(2);",
									"        pm.expect(doc._source.user).eq('Lucy');",
									"        // 保留文档原先字段内容",
									"        pm.expect(doc._source.message).eq('trying out kibana');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"doc\": {\n        \"user\": \"Lucy\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{esHost}}/users/_update/1",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"users",
								"_update",
								"1"
							]
						},
						"description": "### update document\nupdate 只会更新文档对应的字段，其他未更新的字段内容不会变化，并将 _version +1"
					},
					"response": []
				},
				{
					"name": "get document",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"",
									"asyncSeries([",
									"    (cb) => createDocument({",
									"        indexName: 'users',",
									"        doc: {",
									"            \"user\": \"Mike\",",
									"            \"post_date\": \"2019-04-15T14:12:12\",",
									"            \"message\": \"trying out kibana\"",
									"        },",
									"        id: 1",
									"    }, cb)",
									"], (err, res) => {",
									"    if (err) throw err;",
									"",
									"    console.log(`创建文档 ${res ? '成功' : '失败'}`);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"let body = pm.response.json();",
									"",
									"asyncSeries([",
									"    (cb) => deleteIndex('users', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    pm.test('get document(1) successful', function() {",
									"        pm.expect(body.found).eq(true);",
									"        pm.expect(body._source.user).eq('Mike');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{esHost}}/users/_doc/1",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"users",
								"_doc",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete document",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"",
									"asyncSeries([",
									"    (cb) => createDocument({",
									"        indexName: 'users',",
									"        doc: {",
									"            \"user\": \"Mike\",",
									"            \"post_date\": \"2019-04-15T14:12:12\",",
									"            \"message\": \"trying out kibana\"",
									"        },",
									"        id: 1",
									"    }, cb)",
									"], (err, res) => {",
									"    if (err) throw err;",
									"",
									"    console.log(`创建文档 ${res ? '成功' : '失败'}`);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let getDocumentById = eval(pm.globals.get(\"getDocumentById\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"",
									"asyncSeries([",
									"    (cb) => getDocumentById({indexName: 'users',id: 1}, cb),",
									"    (cb) => deleteIndex('users', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    let doc = results[0];",
									"",
									"    pm.test('delete document successful', function() {",
									"        // document 1 not found",
									"        pm.expect(doc.found).eq(false);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{esHost}}/users/_doc/1",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"users",
								"_doc",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "msearch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"let loadDatas = eval(pm.globals.get(\"loadDatas\"));",
									"",
									"let docs = {",
									"    'test1': [",
									"        {'id': 1, 'tag': 'blogging', 'content': 'we bought a house, so I was moving'},",
									"        {'id': 2, 'tag': 'job', 'message': 'learning to get better at by job'},",
									"        {'id': 3, 'tag': 'programming', 'message': 'I feel I should have at my job level'}",
									"    ],",
									"    'test2': [",
									"        {id: 1, autor: 'john', comments: ['good', 'bad']},",
									"        {id: 2, autor: 'tom', comments: ['pretty good', 'normal']},",
									"    ]",
									"};      ",
									"",
									"loadDatas(docs, (err, resp) => {",
									"    if (err) throw err;",
									"",
									"    console.log('数据创建完毕');",
									"    ",
									"// 数据创建完后等待 1000 ms 再查询",
									"}, 1000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"let body = pm.response.json();",
									"",
									"asyncSeries([",
									"    cb => deleteIndex('test1', cb),",
									"    cb => deleteIndex('test2', cb)",
									"], (err, res) => {",
									"    if (err) throw err;",
									"",
									"    pm.test('mulit search successful', () => {",
									"        // 验证 test1 索引 term 精确查询成功",
									"        pm.expect(body.responses[0].hits.hits[0]._source.id).eq(1);",
									"        pm.expect(body.responses[0].hits.hits[0]._source.tag).eq('blogging');",
									"",
									"        // 验证 test1 索引 match 匹配查询成功",
									"        pm.expect(body.responses[1].hits.hits[0]._source.id).eq(2);",
									"        pm.expect(body.responses[1].hits.hits[0]._source.message.startsWith('learning')).to.be.true;",
									"",
									"        // 验证 test2 索引全部查询成功",
									"        pm.expect(body.responses[2].hits.hits.length).eq(2);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-ndjson",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}\n{\"query\":{\"term\":{\"tag.keyword\":\"blogging\"}}}\n{}\n{\"query\":{\"match\":{\"message\":\"learning\"}}}\n{\"index\":\"test2\"}\n{\"query\":{\"match_all\":{}}}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{esHost}}/test1/_msearch",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"test1",
								"_msearch"
							]
						},
						"description": "### multi search\n\nmsearch 可以在一个请求中进行多个查询，其请求格式如下：\n```\nGET /_search\nheader\\n\nbody\\n\nheader\\n\nbody\\n\n```\n请求内容中每一行由换行符分隔（包括最后一行），请求头 `Content-type` 为 `application/x-ndjson`\n\n\n1.  target_index 是查询目标索引，当查询 header 为空则默认使用此索引。其支持使用通配符，也可以为空;\n2.  header 可以进行一些查询的配置，如：\n    -   index 指定查询索引\n    -   routing 指定路由\n    -   search_type 查询类型（使用本地还是全局的 term 和文档频率进行算分）\n    -   ...\n3.  body 记录查询参数：\n    -   aggregation 聚合方式\n    -   query 查询参数，同一般查询 DSL\n    -   from 分页起点\n    -   size 分页大小\n\n更多详情请参阅官方文档 [https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-multi-search.html](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-multi-search.html)"
					},
					"response": []
				},
				{
					"name": "bulk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let getDocumentById = eval(pm.globals.get(\"getDocumentById\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"let body = pm.response.json();",
									"",
									"asyncSeries([",
									"    (cb) => getDocumentById({indexName: 'test', id: 1}, cb),",
									"    (cb) => getDocumentById({indexName: 'test', id: 3}, cb),",
									"    (cb) => deleteIndex('test', cb)",
									"], (err, results) => {",
									"    if (err) throw err;",
									"",
									"    let doc1 = results[0];",
									"    let doc2 = results[1];",
									"",
									"    pm.test('bulk successful', function() {",
									"        // 创建文档 1 成功并更新",
									"        pm.expect(doc1.found).eq(true);",
									"        pm.expect(doc1._version).eq(2);",
									"        pm.expect(doc1._source.field1).eq('value1');",
									"        pm.expect(doc1._source.field2).eq('value2');",
									"        // 创建文档 3 成功",
									"        pm.expect(doc2.found).eq(true);",
									"",
									"        // 创建文档 1 成功",
									"        pm.expect(body.items[0].index.result).eq('created');",
									"        // 删除文档 2 失败（文档 2 不存在），该操作失败不影响其他操作",
									"        pm.expect(body.items[1].delete.result).eq('not_found');",
									"        // 创建文档 3 成功",
									"        pm.expect(body.items[2].create.result).eq('created');",
									"        // 更新文档 1 成功",
									"        pm.expect(body.items[3].update.result).eq('updated');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"index\" : { \"_index\" : \"test\", \"_id\" : \"1\" } }\n{ \"field1\" : \"value1\" }\n{ \"delete\" : { \"_id\" : \"2\" } }\n{ \"create\" : { \"_id\" : \"3\" } }\n{ \"field1\" : \"value3\" }\n{ \"update\" : {\"_id\" : \"1\"} }\n{ \"doc\" : {\"field2\" : \"value2\"} }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{esHost}}/test/_bulk",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"test",
								"_bulk"
							]
						},
						"description": "### bulk \nbulk 能同时执行多条命令\n- 部分命令报错不会影响另一部分命令的执行\n- 每条命令使用 \\n 分隔（最后一条命令也要使用 \\n 结尾）\n- 可以指定默认目标索引，没有 _index 参数的命令会使用默认目标索引\n\n官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-bulk.html"
					},
					"response": []
				},
				{
					"name": "mget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
									"let body = pm.response.json();",
									"let indexs = ['test1', 'test2', 'test3', 'test4'];",
									"",
									"asyncSeries(",
									"    indexs.map(index => cb => deleteIndex(index, cb)),",
									"    (err, results) => {",
									"        if (err) throw err;",
									"",
									"        pm.test('multi get successful', function() {",
									"            // 验证获取默认索引文档",
									"            pm.expect(body.docs[0].found).eq(true);",
									"            pm.expect(body.docs[0]._source.id).eq(1);",
									"            // 验证获取指定索引文档",
									"            pm.expect(body.docs[1].found).eq(true);",
									"            pm.expect(body.docs[1]._source.id).eq(1);",
									"            // 验证获取指定字段",
									"            pm.expect(body.docs[2].found).eq(true);",
									"            pm.expect(body.docs[2]._source.id).eq(2);",
									"            pm.expect(body.docs[2]._source.age).is.undefined;",
									"            // 验证获取文档失败（文档不存在）",
									"            pm.expect(body.docs[3].found).eq(false);",
									"        });",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
									"let createDocument = eval(pm.globals.get(\"createDocument\"));",
									"let docs = {",
									"    \"test1\": {id: 1, name: \"zhangsan\", age: 18},",
									"    \"test2\": {id: 1, date: '2022-09-21', count: 2},",
									"    \"test3\": {id: 2, name: 'lisi', age: 29},",
									"    \"test4\": {id: 2, date: '2022-09-23', count: 3}",
									"};",
									"",
									"// 创建多个索引多条数据",
									"asyncSeries(",
									"    Object.entries(docs)",
									"    .map(([k, v]) => ",
									"        (cb) => createDocument({",
									"            indexName: k,",
									"            doc: v,",
									"            id: v.id",
									"        }, cb)",
									"    ), ",
									"    (err, res) => {",
									"        if (err) throw err;",
									"",
									"        console.log('数据已创建');",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"docs\": [\n        {\n            \"_id\": 1\n        },\n        {\n            \"_id\": 1,\n            \"_index\": \"test2\"\n        },\n        {\n            \"_id\": 2,\n            \"_index\": \"test3\",\n            \"_type\": \"_doc\",\n            \"_source\": [\"id\", \"name\"]\n        },\n        {\n            \"_id\": 3,\n            \"_index\": \"test4\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{esHost}}/test1/_mget/",
							"host": [
								"{{esHost}}"
							],
							"path": [
								"test1",
								"_mget",
								""
							]
						},
						"description": "### multi get\n\nmulti get 可以同时获取多条数据\n\n- 指定默认索引\n`GET /test/_mget`  \n- 使用 ids 查询指定 id 的数据  \n```\nGET /test/_mget\n{\n   \"ids\": [\"1\", \"2\"]\n}\n```\n- 使用 docs 获取指定文档\n    - 使用 _source 指定返回字段  \n    - 使用 _index 指定返回字段\n\n官方文档：[https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-multi-get.html](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-multi-get.html)"
					},
					"response": []
				}
			],
			"description": "演示如何文档的增删改查：\n\n- 增加(create document)  \n- index(index document)  \n- 更新(update document)  \n- 获取(get document)  \n- 删除(delete document)  \n- 批量操作(bulk)  \n- 批量获取(multi get)  \n- 批量查询(multi search)"
		},
		{
			"name": "index",
			"item": [
				{
					"name": "index management",
					"item": [
						{
							"name": "get index",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"let createIndex = eval(pm.globals.get(\"createIndex\"));",
											"let options = {",
											"    \"indexName\": \"my-index-000001\",",
											"    \"settings\": {",
											"        \"index\": {",
											"            \"number_of_shards\": 1,",
											"            \"number_of_replicas\": 2",
											"        }",
											"    },",
											"    \"mappings\": {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"text\"",
											"            },",
											"            \"tags\": {",
											"                \"type\": \"keyword\"",
											"            }",
											"        }",
											"    },",
											"    \"aliases\": {",
											"        \"index01-middle\": {",
											"            \"filter\": {",
											"                \"term\": {",
											"                    \"tags\": \"middle\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    resp[0] && console.log('索引已创建');",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const indexName = 'my-index-000001';",
											"let body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => deleteIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    pm.test('get index successful', () => {",
											"        pm.expect(body[indexName]).to.be.exist;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{esHost}}/my-index-000001",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001"
									]
								}
							},
							"response": []
						},
						{
							"name": "open index",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"const closeIndex = eval(pm.globals.get(\"closeIndex\"));",
											"const indexName = 'my-index-000001';",
											"",
											"asyncSeries([",
											"    // 创建索引",
											"    cb => createIndex({indexName}, cb),",
											"    // 关闭索引",
											"    cb => closeIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const getIndexStatus = eval(pm.globals.get(\"getIndexStatus\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const indexName = 'my-index-000001';",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => getIndexStatus(indexName, cb),",
											"    cb => deleteIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    pm.test('open index successful', () => {",
											"        pm.expect(body.acknowledged).is.to.true;",
											"",
											"        // 验证索引状态为 open",
											"        pm.expect(resp[0]).is.to.contain('open');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{esHost}}/my-index-000001/_open",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001",
										"_open"
									]
								},
								"description": "### open index\n对已关闭的索引进行重新开启\n\n官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-open-close.html"
							},
							"response": []
						},
						{
							"name": "create index",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"let getIndex = eval(pm.globals.get(\"getIndex\"));",
											"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"let body = pm.response.json();",
											"const indexName = 'my-index-000001';",
											"",
											"asyncSeries([",
											"    cb => getIndex(indexName, cb),",
											"    cb => deleteIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let indexInfo = resp[0];",
											"",
											"    pm.test('create index successful', () => {",
											"        // 验证索引创建成功",
											"        pm.expect(body.acknowledged).to.be.true;",
											"",
											"        // 验证索引 mappings 是否正确",
											"        pm.expect(indexInfo[indexName].mappings.properties.id.type).eq('integer');",
											"",
											"        // 验证索引 settings 是否正确",
											"        pm.expect(indexInfo[indexName].settings.index.number_of_shards).eq('1');",
											"        pm.expect(indexInfo[indexName].settings.index.number_of_replicas).eq('2');",
											"",
											"        // 验证索引 alias 是否正确",
											"        pm.expect(indexInfo[indexName].aliases['index01-middle']).to.be.exist;",
											"        pm.expect(indexInfo[indexName].aliases['index01-middle'].filter.term.tags).eq('middle');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"settings\": {\n        \"index\": {\n            \"number_of_shards\": 1,\n            \"number_of_replicas\": 2\n        }\n    },\n    \"mappings\": {\n        \"properties\": {\n            \"id\": {\n                \"type\": \"integer\"\n            },\n            \"name\": {\n                \"type\": \"text\"\n            },\n            \"tags\": {\n                \"type\": \"keyword\"\n            }\n        }\n    },\n    \"aliases\": {\n        \"index01-middle\": {\n            \"filter\": {\n                \"term\": {\n                    \"tags\": \"middle\"\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/my-index-000001",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001"
									]
								},
								"description": "### create index\n\n创建索引请求格式如下：\n\n```\nPUT /my-index-000001\n{\n  \"settings\": {\n    \"index\": {\n      \"number_of_shards\": 3,  \n      \"number_of_replicas\": 2 \n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"field1\": { \"type\": \"text\" }\n    }\n  }\n  \"aliases\": {\n    \"alias_1\": {},\n    \"alias_2\": {\n      \"filter\": {\n        \"term\": { \"user.id\": \"kimchy\" }\n      },\n      \"routing\": \"shard-1\"\n    }\n  }\n}\n\n```\n\n索引名称需符合以下要求：\n\n- 只能小写  \n- 不能包含右侧字符：, /, \\*, ?, \", <, >, |, (space character), ,, #  \n- 不能以 -,_,+ 符号起始  \n- 不能为 . 或者 ..  \n- 不能超过 255 字节  \n- 不能以 . 符号起始\n\n查询参数：\n\n- wait_for_active_shards 在发起请求前等待有效的分片数，可以为 all 或者\\[1, number_of_replicas + 1\\]  \n- master_timeout 连接到主节点的超时时间，默认为 30s  \n- timeout 响应超时时间\n\n请求体：\n\n- [aliases](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/aliases.html)\n- [mappings](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/mapping.html)\n- [settings](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/index-modules.html#index-modules-settings)\n\n官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-create-index.html"
							},
							"response": []
						},
						{
							"name": "delete index",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"let createIndex = eval(pm.globals.get(\"createIndex\"));",
											"let options = {",
											"    \"indexName\": \"my-index-000001\"",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    resp[0] && console.log('索引已创建');",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const getIndex = eval(pm.globals.get(\"getIndex\"));",
											"const indexName = 'my-index-000001';",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => getIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let indexInfo = resp[0];",
											"",
											"    pm.test('delete index successful', () => {",
											"        pm.expect(body.acknowledged).to.be.true;",
											"        ",
											"        // 验证索引已被删除",
											"        pm.expect(indexInfo.status).eq(404);",
											"        pm.expect(indexInfo.error.type).eq('index_not_found_exception');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{esHost}}/my-index-000001",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001"
									]
								}
							},
							"response": []
						},
						{
							"name": "clone index",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"const options = {",
											"    \"indexName\": \"my-index-000001\",",
											"    \"settings\": {",
											"        \"index\": {",
											"            \"number_of_shards\": 1,",
											"            \"number_of_replicas\": 2,",
											"            \"blocks.write\": true",
											"        }",
											"    },",
											"    \"mappings\": {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"text\"",
											"            },",
											"            \"tags\": {",
											"                \"type\": \"keyword\"",
											"            }",
											"        }",
											"    },",
											"    \"aliases\": {",
											"        \"index01-middle\": {",
											"            \"filter\": {",
											"                \"term\": {",
											"                    \"tags\": \"middle\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    resp[0] && console.log('索引已创建');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const getIndex = eval(pm.globals.get(\"getIndex\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const cloneIndexName = 'cloned-my-index-000001';",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => getIndex(cloneIndexName, cb),",
											"    cb => deleteIndex('my-index-000001', cb),",
											"    cb => deleteIndex(cloneIndexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let cloneIndexInfo = resp[0];",
											"",
											"    pm.test('clone index successful', () => {",
											"        pm.expect(body.acknowledged).to.be.true;",
											"        // 验证索引拷贝成功",
											"        pm.expect(cloneIndexInfo[cloneIndexName]).to.be.exist;",
											"        // 验证目标索引 aliases 创建成功",
											"        pm.expect(cloneIndexInfo[cloneIndexName].aliases['clone-index01-high']).to.be.exist;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"settings\": {\n        \"index\": {\n            \"number_of_shards\": 1,\n            \"number_of_replicas\": 2\n        }\n    },\n    \"aliases\": {\n        \"clone-index01-high\": {\n            \"filter\": {\n                \"term\": {\n                    \"tags\": \"high\"\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/my-index-000001/_clone/cloned-my-index-000001",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001",
										"_clone",
										"cloned-my-index-000001"
									]
								},
								"description": "### clone index\n\nclone index 可以拷贝已有索引生成新的索引\n\n#### 拷贝前提要求\n\n- 目标索引不存在  \n- 目标索引和源索引分片数一致  \n- 处理拷贝索引的节点有足够的磁盘空间完成已有索引的拷贝\n\n#### 说明\n\n- 索引模板不会应用于目标索引  \n- 目标索引不会拷贝源索引的元信息(metadata)  \n- 拷贝会赋值绝大部分源索引配置到目标索引中，但 index.number_of_replicas 和 index.auto_expand_replicas 配置除外，可以在 clone 请求中指定此参数\n\n#### 拷贝流程\n\n- unassigned 各分片尚未分配  \n- initializing 主分片已分配  \n- active 主分片拷贝完成，es 将尝试拷贝分片副本和将主分片重定位到其他节点\n\n可以使用 _cat recovery API 查看进度\n\n#### 请求参数：\n\n与 create index 参数类似，可以在请求体中指定 settings 和 aliases 参数，但不能指定 mapping 参数\n\n官方文档：[https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-clone-index.html](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-clone-index.html)"
							},
							"response": []
						},
						{
							"name": "close index",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"const options = {",
											"    \"indexName\": \"my-index-000001\",",
											"    \"settings\": {",
											"        \"index\": {",
											"            \"number_of_shards\": 1,",
											"            \"number_of_replicas\": 2",
											"        }",
											"    },",
											"    \"mappings\": {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"text\"",
											"            },",
											"            \"tags\": {",
											"                \"type\": \"keyword\"",
											"            }",
											"        }",
											"    },",
											"    \"aliases\": {",
											"        \"index01-middle\": {",
											"            \"filter\": {",
											"                \"term\": {",
											"                    \"tags\": \"middle\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"let getIndexStatus = eval(pm.globals.get(\"getIndexStatus\"));",
											"let deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const indexName = 'my-index-000001';",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => getIndexStatus(indexName, cb),",
											"    cb => deleteIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let indexStatus = resp[0];",
											"",
											"    pm.test('close index successful', () => {",
											"        pm.expect(body.indices[indexName].closed).is.to.true;",
											"",
											"        // 验证索引状态为 close",
											"        pm.expect(indexStatus).is.contain('close');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{esHost}}/my-index-000001/_close",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001",
										"_close"
									]
								},
								"description": "### close index\n\n```\nPOST /my-index-000001/_close\n\n```\n\n你可以使用 close API 关闭索引，其会阻塞索引上的读写操作，以及不允许任何可以在正常状态索引上的操作。关闭的索引不会维护内部数据结构用于保存和查询文档，其会降低集群的消耗。使用通配符或者 _all 参数关闭多个索引。对已经关闭的索引执行查询等操作将会抛出 index_closed_exception 异常。     \n当启动/关闭索引时，分片会执行恢复流程，以确保集群始终保留足够的分片副本。  \n关闭索引会消耗大量的磁盘空间，可能会在部署环境中引发一些问题。\n\n官方文档：[https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-close.html](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-close.html)"
							},
							"response": []
						},
						{
							"name": "get indices",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"",
											"asyncSeries([",
											"    cb => createIndex({indexName: 'my-index-000001'}, cb),",
											"    cb => createIndex({indexName: 'my-index-000002'}, cb),",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const body = pm.response.text();",
											"const indexName1 = 'my-index-000001';",
											"const indexName2 = 'my-index-000002';",
											"",
											"asyncSeries([",
											"    cb => deleteIndex(indexName1, cb),",
											"    cb => deleteIndex(indexName2, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let cols = body.split('\\n')",
											"            // skip head",
											"            .slice(1)",
											"            .flatMap(row => row.split(/\\s+/));",
											"",
											"    pm.test('get indices successful', () => {",
											"        pm.expect(cols).is.to.contains(indexName1);",
											"        pm.expect(cols).is.to.contains(indexName2);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{esHost}}/_cat/indices?v",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"_cat",
										"indices"
									],
									"query": [
										{
											"key": "v",
											"value": null
										}
									]
								},
								"description": "### cat indices \n显示所有索引信息列表\n\n更多 cat API 用法参考官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat.html"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let getIndexStatus = (indexName, callback) => {",
									"    pm.sendRequest({",
									"        url: `${pm.collectionVariables.get('esHost')}/_cat/indices/${indexName}?h=status`,",
									"        method: 'GET',",
									"    }, (err, resp) => {",
									"        if (err) return callback(err);",
									"",
									"        callback(null, resp.text());",
									"    });",
									"};",
									"",
									"let closeIndex = (indexName, callback) => {",
									"    pm.sendRequest({",
									"        url: `${pm.collectionVariables.get('esHost')}/${indexName}/_close`,",
									"        method: 'POST',",
									"    }, (err, resp) => {",
									"        if (err) return callback(err);",
									"",
									"        let body = resp.json();",
									"",
									"        callback(",
									"            body.acknowledged ? ",
									"                null:",
									"                new Error(`${indexName} 关闭失败`), ",
									"            body.acknowledged",
									"        );",
									"    });",
									"};",
									"",
									"postman.setGlobalVariable('getIndexStatus', getIndexStatus);",
									"postman.setGlobalVariable('closeIndex', closeIndex);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "mapping management",
					"item": [
						{
							"name": "update mapping",
							"item": [
								{
									"name": "add field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const createIndex = eval(pm.globals.get(\"createIndex\"));",
													"const options = {",
													"    \"indexName\": \"my-index-000001\"",
													"};",
													"",
													"asyncSeries([",
													"    // 创建一个没有 mappings、settings 的索引",
													"    cb => createIndex(options, cb)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const getIndex = eval(pm.globals.get(\"getIndex\"));",
													"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
													"const indexName = 'my-index-000001';",
													"const body = pm.response.json();",
													"",
													"asyncSeries([",
													"    cb => getIndex(indexName, cb),",
													"    cb => deleteIndex(indexName, cb)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"",
													"    let indexInfo = resp[0];",
													"",
													"    pm.test('add field successful', () => {",
													"        // 验证字段添加成功",
													"        pm.expect(body.acknowledged).to.be.true;",
													"        pm.expect(indexInfo[indexName].mappings.properties.title.type).eq('text');",
													"    });",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": {\n        \"title\": {\n            \"type\": \"text\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esHost}}/my-index-000001/_mapping",
											"host": [
												"{{esHost}}"
											],
											"path": [
												"my-index-000001",
												"_mapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "add properties to existing field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const createIndex = eval(pm.globals.get(\"createIndex\"));",
													"const options = {",
													"    \"indexName\": \"my-index-000001\",",
													"    \"mappings\": {",
													"        \"properties\": {",
													"            \"name\": {",
													"                \"properties\": {",
													"                    \"first\": {",
													"                        \"type\": \"text\"",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    }",
													"};",
													"",
													"asyncSeries([",
													"    // 创建 name 多字段类型的索引",
													"    cb => createIndex(options, cb)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const getIndex = eval(pm.globals.get(\"getIndex\"));",
													"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
													"const indexName = 'my-index-000001';",
													"const body = pm.response.json();",
													"",
													"asyncSeries([",
													"    cb => getIndex(indexName, cb),",
													"    cb => deleteIndex(indexName, cb)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"",
													"    let indexInfo = resp[0];",
													"",
													"    pm.test('add properties to existing field successful', () => {",
													"        pm.expect(body.acknowledged).to.be.true;",
													"",
													"        let nameProps = indexInfo[indexName].mappings.properties.name.properties;",
													"",
													"        pm.expect(nameProps.first.type).eq('text');",
													"        pm.expect(nameProps.last.type).eq('integer');",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"properties\": {\n    \"name\": {\n      \"properties\": {\n        \"last\": {\n          \"type\": \"integer\"\n        }\n      }\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esHost}}/my-index-000001/_mapping",
											"host": [
												"{{esHost}}"
											],
											"path": [
												"my-index-000001",
												"_mapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "add multi fields to existing field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const createIndex = eval(pm.globals.get(\"createIndex\"));",
													"const options = {",
													"    \"indexName\": \"my-index-000001\",",
													"    \"mappings\": {",
													"        \"properties\": {",
													"            \"city\": {",
													"                \"type\": \"text\"",
													"            }",
													"        }",
													"    }",
													"};",
													"",
													"asyncSeries([",
													"    // 创建 name 多字段类型的索引",
													"    cb => createIndex(options, cb)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const getIndex = eval(pm.globals.get(\"getIndex\"));",
													"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
													"const indexName = 'my-index-000001';",
													"const body = pm.response.json();",
													"",
													"asyncSeries([",
													"    cb => getIndex(indexName, cb),",
													"    cb => deleteIndex(indexName, cb)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"",
													"    let indexInfo = resp[0];",
													"",
													"    pm.test('add multi fields to existing field successful', () => {",
													"        pm.expect(body.acknowledged).to.be.true;",
													"",
													"        let cityProps = indexInfo[indexName].mappings.properties.city;",
													"        ",
													"        pm.expect(cityProps.type).eq('text');",
													"        pm.expect(cityProps.fields.raw.type).eq('keyword');",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"properties\": {\n    \"city\": {\n      \"type\": \"text\",\n      \"fields\": {\n        \"raw\": {\n          \"type\": \"keyword\"\n        }\n      }\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esHost}}/my-index-000001/_mapping",
											"host": [
												"{{esHost}}"
											],
											"path": [
												"my-index-000001",
												"_mapping"
											]
										},
										"description": "### field properties vs multi field\n\nfield properties 和 multi field 的区别：\n\n- 当 field 类型为 object 或 nested 类型时，可以通过 properties 属性指定子字段（object field 和 nested field 的区别请阅读 [nested field vs object field](../../../../examples/nested-field-vs-object-field)章节\n- 当同一个字段出于不同目的需要不同的使用方式，则可以使用 multi field，比如为字段设置 text 类型，可以方便全文搜索，扩大命中概率；为字段再设置 keyword 类型，可以方便排序和聚合。不同字段类型还可以使用不同的分词器（analyzer）"
									},
									"response": []
								},
								{
									"name": "change mapping parameters for existing field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const createIndex = eval(pm.globals.get(\"createIndex\"));",
													"const options = {",
													"    \"indexName\": \"my-index-000001\",",
													"    \"mappings\": {",
													"        \"properties\": {",
													"            \"user_id\": {",
													"                \"type\": \"keyword\",",
													"                // keyword 类型字段存储长度为 20",
													"                \"ignore_above\": 20",
													"            }",
													"        }",
													"    }",
													"};",
													"",
													"asyncSeries([",
													"    cb => createIndex(options, cb)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const getIndex = eval(pm.globals.get(\"getIndex\"));",
													"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
													"const indexName = 'my-index-000001';",
													"const body = pm.response.json();",
													"",
													"asyncSeries([",
													"    cb => getIndex(indexName, cb),",
													"    cb => deleteIndex(indexName, cb)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"",
													"    let indexInfo = resp[0];",
													"",
													"    pm.test('change mapping parameters for existing field successful', () => {",
													"        pm.expect(body.acknowledged).to.be.true;",
													"",
													"        pm.expect(indexInfo[indexName].mappings.properties.user_id.ignore_above).eq(30);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"properties\": {\n    \"user_id\": {\n      \"type\": \"keyword\",\n      \"ignore_above\": 30\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esHost}}/my-index-000001/_mapping",
											"host": [
												"{{esHost}}"
											],
											"path": [
												"my-index-000001",
												"_mapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "rename existing field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const createIndex = eval(pm.globals.get(\"createIndex\"));",
													"const createDocument = eval(pm.globals.get(\"createDocument\"));",
													"const loadDatas = eval(pm.globals.get(\"loadDatas\"));",
													"const options = {",
													"    \"indexName\": \"my-index-000001\",",
													"    \"mappings\": {",
													"        \"properties\": {",
													"            \"user_identifier\": {",
													"                \"type\": \"keyword\"",
													"            }",
													"        }",
													"    }",
													"};",
													"const docs = {",
													"    \"my-index-000001\": [",
													"        {\"id\": 1, \"user_identifier\": 1}",
													"    ]",
													"};",
													"",
													"asyncSeries([",
													"    cb => createIndex(options, cb),",
													"    cb => loadDatas(docs, cb, 1000)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const searchDocument = eval(pm.globals.get(\"searchDocument\"));",
													"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
													"const indexName = 'my-index-000001';",
													"const searchDsl = {",
													"    'query': {",
													"        'term': {",
													"            'user_id': 1",
													"        }",
													"    }",
													"};",
													"const body = pm.response.json();",
													"",
													"asyncSeries([",
													"    cb => searchDocument(indexName, searchDsl, cb),",
													"    cb => deleteIndex(indexName, cb)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"",
													"    let docSearchResponse = resp[0];",
													"    console.log(docSearchResponse);",
													"",
													"    pm.test('rename field successful', () => {",
													"        pm.expect(body.acknowledged).to.be.true;",
													"",
													"        pm.expect(docSearchResponse.hits.hits.length).eq(1);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"properties\": {\n    \"user_id\": {\n      \"type\": \"alias\",\n      \"path\": \"user_identifier\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esHost}}/my-index-000001/_mapping",
											"host": [
												"{{esHost}}"
											],
											"path": [
												"my-index-000001",
												"_mapping"
											]
										},
										"description": "### rename field\n\n因为旧字段下的数据已经被索引存储，所以对旧字段重命名是无效的，但是可以使用别名(alias)为旧字段创建另一个名字"
									},
									"response": []
								}
							],
							"description": "### update index mapping\n\n```\nPUT //_mapping\n\n```\n\n更新指定索引的 mapping， 支持逗号分隔的多个索引名称，或使用 \\* 和 _all 通配符应用于所有索引上\n\n**请求参数：**\n\n- allow_no_indices  \n    是否允许索引不存在。如果为 false，且索引不存在或者关闭，则请求返回错误。默认为 true\n- expend_wildcards  \n    通配符模式可以匹配的索引类型，支持逗号分隔的多个类型，默认为 open\n    - all  \n        匹配全部索引（包括隐藏的索引）\n    - open  \n        匹配开启的，未隐藏的索引\n    - closed  \n        匹配关闭的，为隐藏的索引\n    - hidden  \n        匹配隐藏的索引\n    - none  \n        不匹配任何索引\n- include_type_name  \n    期待 mapping body 里有 mapping type，默认为 false\n- ignore_unavailable  \n    如果为 false 且目标索引不存在或关闭则请求返回错误，默认为 false\n- master_timeout  \n    连接到主节点的等待时间，超过改时间则请求失败并返回异常，默认为 30s\n- timeout  \n    响应等待时长，超时则请求失败并返回异常，默认为 30s\n- write_index_only  \n    如果为 true 则只会对可写索引进行 mapping 更新，默认为 false\n    \n\n**请求体：**  \nproperties 参数可以包括以下内容：\n\n- 字段名称\n- [字段类型](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/mapping-types.html)\n- [mapping 参数](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/mapping-params.html)\n    \n\n具体的更新操作如下：\n\n- [新增索引字段](./add-field)\n- [在已存在字段上新增配置](./add-properties-to-existing-field)\n- [在已存在字段上新增多字段](./add-multi-fields-to-existing-field)\n- [修改已存在字段的参数](./change-mapping-parameters-for-existing-field)\n- 修改已存在字段的 mapping\n因为数据已被索引，所以修改已存在的字段类型是无效的。但可以用新的 mapping 创建新索引，然后将数据重索引(reindex)到新索引上，见[原文](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-put-mapping.html#updating-field-mappings)\n- [重命名已存在字段](./rename-existing-field)\n    \n\n官方文档：[https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-put-mapping.html](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-put-mapping.html)"
						},
						{
							"name": "get mapping",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"const options = {",
											"    \"indexName\": \"my-index-000001\",",
											"    \"mappings\": {",
											"        \"properties\": {",
											"            \"name\": {",
											"                \"type\": \"text\"",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const indexName = 'my-index-000001';",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => deleteIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    pm.test('get mapping successful', () => {",
											"        pm.expect(body[indexName].mappings.properties.name).to.be.exist;",
											"        pm.expect(body[indexName].mappings.properties.name.type).eq('text');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{esHost}}/my-index-000001/_mapping",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001",
										"_mapping"
									]
								},
								"description": "### get mapping\n\n```\nGET /<target>/_mapping\n\n```\n\n获取索引的 mapping 信息。 <target> 为目标索引，支持英文逗号分隔的多个索引名称，也可以使用 _all, * 通配符获取全部索引的 mapping 信息。\n\n```\nGET /<target>/_mapping/field/\n\n```\n\n获取索引字段的配置信息。 <target>为目标索引，具体用法同上所述。 为目标字段，支持英文逗号分隔的多个字段名称，也可以使用 _all, * 通配符获取全部字段的配置信息，另外还支持前缀和后缀通配符匹配，如：a* 匹配以 a 开头的字段，*id 匹配以 id 结尾的字段。"
							},
							"response": []
						}
					]
				},
				{
					"name": "alias management",
					"item": [
						{
							"name": "create or update alias",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"const createDocument = eval(pm.globals.get(\"createDocument\"));",
											"const loadDatas = eval(pm.globals.get(\"loadDatas\"));",
											"const options = {",
											"    \"indexName\": \"my-index-000001\",",
											"    \"mappings\": {",
											"        \"properties\": {",
											"            \"user_identifier\": {",
											"                \"type\": \"keyword\"",
											"            }",
											"        }",
											"    }",
											"};",
											"const docs = {",
											"    \"my-index-000001\": [",
											"        {\"id\": 1, \"user_identifier\": 1}",
											"    ]",
											"};",
											"",
											"asyncSeries([",
											"    // 创建 my-index-000001 索引",
											"    cb => createIndex(options, cb),",
											"    // 插入若干数据",
											"    cb => loadDatas(docs, cb, 1000)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const searchDocument = eval(pm.globals.get(\"searchDocument\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    // 通过别名获取数据",
											"    cb => searchDocument('my-alias', {query: {match_all: {}}}, cb),",
											"    cb => deleteIndex('my-index-000001', cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let searchResp = resp[0];",
											"",
											"    pm.test('create/update alias successful', () => {",
											"        // 测试别名创建是否成功",
											"        pm.expect(body.acknowledged).eq(true);",
											"        // 测试是否可以通过索引查询数据",
											"        pm.expect(searchResp.hits.hits.length).to.gt(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{esHost}}/my-index-000001/_alias/my-alias",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001",
										"_alias",
										"my-alias"
									]
								},
								"description": "### create or update alias\n\n创建或更新索引\n\n```\nPOST /_alias/\nPOST /_aliases/\nPUT /_alias/\nPUT /_aliases/\n\n```\n\n**路径参数**\n\n- alias 更新后的别名，如果别名不存在，则请求创建别名。别名名称支持\\[日期数学（date math）\\]([https://www.elastic.co/guide/en/elasticsearch/reference/7.17/date-math-index-names.html](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/date-math-index-names.html))\n- target 待添加的逗号分隔的索引、数据流列表，支持通配符\n    \n\n**请求参数**\n\n- master_timeout 连接主节点的等待时间，默认 30s\n- timeout 等待响应的等待时间，默认 30s\n    \n\n**请求体**\n\n- filter 使用 Query DSL 指定别名可以查询的文档\n- index_routing 将索引（indexing）数据操作路由到指定分片\n- routing 将索引、查询数据操作路由到指定分片\n- search_routing 将查询数据操作路由到指定分片\n- is_hidden 如果为 true，别名将被隐藏\n- is_write_index 如果为true，则别名设置可写的索引，即通过此别名向对应的索引写入数据"
							},
							"response": []
						},
						{
							"name": "get alias",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"const options = {",
											"    'indexName': 'my-index-000001',",
											"    // 创建索引时创建别名",
											"    'aliases': {",
											"        'my-alias': {",
											"            'is_write_index': true",
											"        }",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const indexName = 'my-index-000001';",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => deleteIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    pm.test('get alias successful', () => {",
											"        pm.expect(body[indexName].aliases['my-alias']).to.be.exist;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{esHost}}/my-index-000001/_alias/my-alias",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001",
										"_alias",
										"my-alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete alias",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"const options = {",
											"    'indexName': 'my-index-000001',",
											"    // 创建索引时创建别名",
											"    'aliases': {",
											"        'my-alias': {",
											"            'is_write_index': true",
											"        }",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const getAlias = eval(pm.globals.get(\"getAlias\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const indexName = 'my-index-000001';",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => getAlias(indexName, cb),",
											"    cb => deleteIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let aliasInfo = resp[0];",
											"",
											"    pm.test('delete alias successful', () => {",
											"        // 判断别名删除成功",
											"        pm.expect(body.acknowledged).eq(true);",
											"        pm.expect(aliasInfo[indexName].aliases['my-alias']).to.be.not.exist;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{esHost}}/my-index-000001/_alias/my-alias",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001",
										"_alias",
										"my-alias"
									]
								}
							},
							"response": []
						}
					],
					"description": "alias 是索引和数据流（data stream）的辅助名称，es 大部分 API 都支持使用别名代替数据流和索引名称。\n\n本章节将要演示的 alias API:\n\n- create/update alias\n- get alias\n- delete alias",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let getAlias = (indexName, cb) => {",
									"    pm.sendRequest({    ",
									"        url: `${pm.collectionVariables.get('esHost')}/${indexName}/_alias`,",
									"        method: 'GET'",
									"    }, (err, resp) => {",
									"        if (err) throw err;",
									"",
									"        cb(null, resp.json());",
									"    });",
									"};",
									"",
									"postman.setGlobalVariable('getAlias', getAlias);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "settings management",
					"item": [
						{
							"name": "update index settings",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"const options = {",
											"    \"indexName\": \"my-index-000001\",",
											"    \"settings\": {",
											"        \"number_of_shards\": 1,",
											"        \"number_of_replicas\": 1",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"    cb => createIndex(options, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const getIndex = eval(pm.globals.get(\"getIndex\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const indexName = 'my-index-000001';",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => getIndex(indexName, cb),",
											"    cb => deleteIndex(indexName, cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    let indexInfo = resp[0];",
											"",
											"    pm.test('update settings successful', () => {",
											"        // 验证索引 setting 更新成功",
											"        pm.expect(body.acknowledged).eq(true);",
											"        pm.expect(indexInfo[indexName].settings.index['number_of_replicas']).eq('2');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"index\": {\n        \"number_of_replicas\": 2\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/my-index-000001/_settings",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001",
										"_settings"
									]
								},
								"description": "### update settings\n\n更新索引 settings\n\n```\nPUT //_settings\n```\n\n请求参数：\n\n- allow_no_indices\n- expand_wildcards\n- flat_settings\n- ignore_unavailable\n- preserve_existing\n- master_timeout\n- timeout\n    \n\n请求体：\n\n索引 setting 分为两大类：\n\n不可更改（只能在索引创建期间指定）：\n\n- index.number_of_shards 主分片个数\n- index.number_of_routing_shards\n- index.codec 压缩算法，默认为 LZ4 算法。更新压缩算法，将于 segment 合并后生效\n- index.routing_partition_size\n- index.soft_deletes.retention_lease.period 在过期前保留分片历史的最长时间\n- index.load_fixed_bitset_filters_eagerly\n- index.shard.check_on_startup\n    \n\n可更改（可在索引运行期间更改）：\n\n- index.number_of_replicas 主分片的副本数\n- index.auto_expand_replicas 根据集群数据节点数扩展副本数量\n- index.search.idle.after 分片多久没收到搜索和请求则被判定为搜索空闲状态的时间\n- index.refresh_interval 执行刷新（使最近改动在索引上搜索可见）操作的间隔\n- index.max_result_window 搜索时 from + size 的最大值\n- index.max_inner_result_window\n- ...\n    \n\n详见 [Index modules | Elasticsearch Guide \\[7.17\\] | Elastic](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/index-modules.html#index-modules-settings)"
							},
							"response": []
						},
						{
							"name": "analyze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"",
											"pm.test('analzye successful', () => {",
											"    pm.expect(body.tokens[0].token).eq('test');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tokenizer\" : \"whitespace\",\n  \"filter\" : [\"lowercase\", {\"type\": \"stop\", \"stopwords\": [\"a\", \"is\", \"this\"]}],\n  \"text\" : \"this is a Test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/_analyze",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"_analyze"
									]
								},
								"description": "### analyze\n\n对文本字符进行分析返回结果标记（token）\n\n```\nGET /_analyze\n\nPOST /_analyze\n\nGET //_analyze\n\nPOST //_analyze\n```\n\n**请求参数：**\n\n- analyzer应用于文本解析的分词器，其可以为内置分词器（[Built-in analyzer reference](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-analyzers.html)），或者是索引中配置的分词器。\n    - 当此参数没有指定时，使用字段上定义的分词器\n    - 当字段（field）没有指定时，使用索引的默认分词器\n    - 当索引没有指定或索引没有默认的分词器时，使用标准分词器（[Standard analyzer](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-standard-analyzer.html) ）\n- attributes\n- char_filter字符过滤器，在 tokenizer 之前进行字符前置处理，见 [Character filters reference | Elasticsearch Guide \\[7.17\\] | Elastic](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-charfilters.html)\n- filter过滤器，在 tokenizer 之后对 token 进行过滤，见 [Token filter reference | Elasticsearch Guide \\[7.17\\] | Elastic](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-tokenfilters.html)\n- normalizer将文本归一化为单个 token，见 [https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-normalizers.html](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-normalizers.html)\n- tokenizer将文本转换为 token，见 [_Tokenizer reference_](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-tokenizers.html)\n- explain如果为 true，返回解析 token 详情\n- field分词器所属的字段，需先指定索引名称\n- text\n    待分析的文本\n    \n\n更多参见官方文档：[https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-analyze.html](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-analyze.html)"
							},
							"response": []
						}
					]
				}
			],
			"description": "### index operations\n\n演示索引相关的操作:\n\n- 创建索引(create index)\n- 获取索引(get index)\n- 删除索引(delete index)\n- 拷贝索引(clone index)\n- 关闭索引(close index)\n- 开启索引(open index)\n- 获取索引设置(get index setting)\n- 更新索引设置(update index setting)\n- 获取索引映射(get index mapping)\n- 更新索引映射(update index mapping)\n- 获取索引(多个)统计(get index stats)\n- 创建别名(create alias)\n- 获取别名(get alias)\n- 删除别名(delete alias)\n- 创建/更新索引模板(create or update index template)\n- 获取索引模板(get index template)\n- 删除索引模板(delete index template)\n- 分词器使用(analyze usage)"
		},
		{
			"name": "examples",
			"item": [
				{
					"name": "nested field vs object field",
					"item": [
						{
							"name": "nested field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createIndex = eval(pm.globals.get(\"createIndex\"));",
											"const createDocument = eval(pm.globals.get(\"createDocument\"));",
											"const loadDatas = eval(pm.globals.get(\"loadDatas\"));",
											"const indexOptions = {",
											"    \"indexName\": \"books_test\",",
											"    \"mappings\": {",
											"        \"properties\": {",
											"            \"authors\": {",
											"                \"type\": \"nested\"",
											"            }",
											"        }",
											"    }",
											"};",
											"const docs = {",
											"    'books_test': [",
											"        {",
											"            \"id\": 1,",
											"            \"name\": \"An Awesome Book\",",
											"            \"tags\": [{ \"name\": \"best-seller\" }, { \"name\": \"summer-sale\" }],",
											"            \"authors\": [",
											"                { \"name\": \"Gustavo Llermaly\", \"age\": \"32\", \"country\": \"Chile\" },",
											"                { \"name\": \"John Doe\", \"age\": \"20\", \"country\": \"USA\" }",
											"            ]",
											"        },",
											"        {",
											"            \"id\": 2,",
											"            \"name\": \"A Regular Book\",",
											"            \"tags\": [{ \"name\": \"free-shipping\" }, { \"name\": \"summer-sale\" }],",
											"            \"authors\": [",
											"                { \"name\": \"Regular author\", \"age\": \"40\", \"country\": \"USA\" },",
											"                { \"name\": \"John Doe\", \"age\": \"20\", \"country\": \"USA\" }",
											"            ]",
											"        }",
											"    ]",
											"};      ",
											"",
											"asyncSeries([",
											"    // 明确指定 author 字段为 nested 类型，防止 es 自动判别为 object 类型",
											"    cb => createIndex(indexOptions, cb),",
											"    cb => loadDatas(docs, cb, 1000)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => deleteIndex('books_test', cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    pm.test('nested field search success', () => {",
											"        // nested 类型查询结果符合预期，返回零条",
											"        pm.expect(body.hits.hits.length).eq(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"authors.country.keyword\": \"Chile\"\n          }\n        },\n        {\n          \"range\": {\n            \"authors.age\": {\n              \"lte\": 30\n            }\n          }\n        }\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/books_test/_search",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"books_test",
										"_search"
									]
								}
							},
							"response": []
						},
						{
							"name": "object field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createDocument = eval(pm.globals.get(\"createDocument\"));",
											"const loadDatas = eval(pm.globals.get(\"loadDatas\"));",
											"const docs = {",
											"    'books_test': [",
											"        {",
											"            \"id\": 1,",
											"            \"name\": \"An Awesome Book\",",
											"            \"tags\": [{ \"name\": \"best-seller\" }, { \"name\": \"summer-sale\" }],",
											"            \"authors\": [",
											"                { \"name\": \"Gustavo Llermaly\", \"age\": \"32\", \"country\": \"Chile\" },",
											"                { \"name\": \"John Doe\", \"age\": \"20\", \"country\": \"USA\" }",
											"            ]",
											"        },",
											"        {",
											"            \"id\": 2,",
											"            \"name\": \"A Regular Book\",",
											"            \"tags\": [{ \"name\": \"free-shipping\" }, { \"name\": \"summer-sale\" }],",
											"            \"authors\": [",
											"                { \"name\": \"Regular author\", \"age\": \"40\", \"country\": \"USA\" },",
											"                { \"name\": \"John Doe\", \"age\": \"20\", \"country\": \"USA\" }",
											"            ]",
											"        }",
											"    ]",
											"};      ",
											"",
											"// 往索引上插入两条嵌套对象类型的文档",
											"loadDatas(docs, (err, resp) => {",
											"    if (err) throw err;",
											"    ",
											"// 数据创建完后等待 1000 ms 再查询",
											"}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => deleteIndex('books_test', cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    // 此测试用例会验证报错",
											"    pm.test('object field search fail', () => {",
											"        // 期待查询结果为零条，实际大于零条",
											"        pm.expect(body.hits.hits.length).eq(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"authors.country.keyword\": \"Chile\"\n          }\n        },\n        {\n          \"range\": {\n            \"authors.age\": {\n              \"lte\": 30\n            }\n          }\n        }\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/books_test/_search",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"books_test",
										"_search"
									]
								}
							},
							"response": []
						}
					],
					"description": "### field: nested vs object\n\n[nested field](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/nested.html) 和 [object field](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/object.html) 类型字段看起来都是对象类型的字段，那它们有什么区别？应该怎么选择？\n\nes 在存储的时候会将文档中的 object 类型的字段进行展开，比如我们往索引中插入以下数据：\n```json\nPUT books_test/_doc/1\n{\n  \"name\": \"An Awesome Book\",\n  \"tags\": [{ \"name\": \"best-seller\" }, { \"name\": \"summer-sale\" }],\n  \"authors\": [\n    { \"name\": \"Gustavo Llermaly\", \"age\": \"32\", \"country\": \"Chile\" },\n    { \"name\": \"John Doe\", \"age\": \"20\", \"country\": \"USA\" }\n  ]\n}\n\nPUT books_test/_doc/2\n{\n  \"name\": \"A Regular Book\",\n  \"tags\": [{ \"name\": \"free-shipping\" }, { \"name\": \"summer-sale\" }],\n  \"authors\": [\n    { \"name\": \"Regular author\", \"age\": \"40\", \"country\": \"USA\" },\n    { \"name\": \"John Doe\", \"age\": \"20\", \"country\": \"USA\" }\n  ]\n}\n```\n其在 es 中实际存储的结构类似于：\n```json\n{\n  \"name\": \"An Awesome Book\",\n  \"tags.name\": [\"best-seller\", \"summer-sale\"],\n  \"authors.name\": [\"Gustavo Llermaly\", \"John Doe\"],\n  \"authors.age\": [32, 20],\n  \"authors.country\": [\"Chile, USA\"]\n}\n```\n在一些查询中这会出现问题，如果我们查询 country 为 chile 且 age 小于 30 的记录，期待返回零条记录，但实际会返回两条记录。这会导致一些问题，该如何解决这个问题？\n\n改用 nested 类型的字段，其是一种特殊对象类型的字段，es 会将 nested 类型的字段单独存储为一个文档，并与对应的外部文档进行关联，因此我们可以对其正确进行查询。\n\n**注意：**\n- 每个索引最多有 50 个 nested 类型的字段，可以通过 index.mapping.nested_fields.limit 参数调整\n- 每个文档最多有 1000 个 nested 类型的对象，可以通过 index.mapping.nested_objects.limit 参数调整\n- 过多的 nested 类型字段会导致性能下降，在需要的时候再使用 nested 类型字段\n- 使用 [flattened field type](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/flattened.html) 类型字段将内部对象的所有关键词类型字段映射到单个字段上\n\n参考文档：[elasticsearch-nested-field-object-field](https://opster.com/guides/elasticsearch/data-architecture/elasticsearch-nested-field-object-field/)"
				}
			],
			"description": "### examples\n\n通过一些示例来阐明一些原理"
		},
		{
			"name": "query",
			"item": [
				{
					"name": "compound queries",
					"item": [
						{
							"name": "boolean query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"",
											"pm.test('boolean query successful', () => {",
											"    // 由于设置了 minimum_should_match 参数，",
											"    // 必须满足一个 should 查询条件，所以返回了 4 条记录",
											"    pm.expect(body.hits.total.value).eq(4);",
											"    // 必须包含 Paramount Picture 演员",
											"    pm.expect(",
											"        body.hits.hits.flatMap(i => ",
											"            i._source.production_companies.map(j => j.name)",
											"        )",
											"    )",
											"    .to.be.all.contains('Paramount Pictures');",
											"    // 名称必须含有 Four、baby 短语",
											"    pm.expect(",
											"        body.hits.hits.map(i => i._source.title)",
											"    )",
											"    .to.be.all.match(/four|baby/i);",
											"    // 发布状态必须为 release",
											"    pm.expect(",
											"        body.hits.hits.map(i => i._source.status)",
											"    )",
											"    .to.be.all.match(/released/i);",
											"    // 得分必须大于 6.0",
											"    pm.expect(",
											"        body.hits.hits.map(i => i._source.vote_average).first()",
											"    )",
											"    .to.be.above(6.0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"title\": \"Four Baby\"\n          }\n        }\n      ],\n      \"must_not\": [\n        {\n          \"range\": {\n            \"vote_average\": {\n              \"lte\": 6.0\n            }\n          }\n        }\n      ],\n      \"should\": [\n        {\n          \"match\": {\n            \"production_companies.name\": \"Paramount Pictures\"\n          }\n        }\n      ],\n      \"filter\": [\n        {\n          \"term\": {\n            \"status.keyword\": \"Released\"\n          }\n        }\n      ],\n      \"minimum_should_match\": 1\n    }\n  },\n  \"_source\": [\n    \"id\", \"title\", \"vote_count\", \"vote_average\", \"production_companies\", \"status\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/tmdb/_search",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"tmdb",
										"_search"
									]
								},
								"description": "### boolean query\n\nboolean query 是由多个查询组合而成的文档查询，其对应于 Lucene 的 BooleanQuery。其有一个或多个子句组成，每个子句都有对应的类型：\n\n- must\n  \n  该子句会匹配对应的文档，并贡献得分\n  \n- filter\n  \n  该子句会匹配对应的文档，但其不同于 must 的地方在于分数会被忽略，并且该子句会被缓存\n  \n- should\n  \n  该子句应该匹配对应的文档\n  \n- must_not\n  \n  该子句不会匹配对应的文档，由于运行于 filter context 中意味着分数将会被忽略且会被缓存\n  \n\nboolean query 采用'匹配尽可能多'的策略，每个文档最终的分数由 must 和 should 子句分数汇总而成。\n\nminimum_should_match 参数用于指定 should 子句最少返回的文档数量。"
							},
							"response": []
						},
						{
							"name": "boosting query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"",
											"pm.test('boosting query successful', () => {",
											"    let hits = body.hits.hits;",
											"    let fourRoomsDoc = hits.find(doc => ",
											"        doc._source.title.match(/four rooms/i)",
											"    );",
											"    let babyDoc = hits.find(doc => ",
											"        doc._source.title.match(/.*baby.*/i)",
											"    );",
											"",
											"    // 根据 four rooms baby 查询",
											"    // four rooms(5) 数据匹配度更高，分数本应更高，",
											"    // 但是由于其又命中了 negative 相关查询，分数被降低，",
											"    // 所以其最终的分数反而小于 Rosemary's Baby(805) 数据",
											"    pm.expect(fourRoomsDoc._score).to.be.below(babyDoc._score);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": {\n    \"boosting\": {\n      \"positive\": {\n        \"bool\": {\n          \"must\": [\n            {\n              \"match\": {\n                \"title\": \"four Rooms baby\"\n              }\n            },\n            {\n              \"constant_score\": {\n                \"filter\": {\n                  \"ids\": {\n                    \"values\": [\n                     805, 5\n                    ]\n                  }\n                }\n              }\n            }\n          ]\n        }\n      },\n      \"negative\": {\n        \"match\": {\n          \"title\": \"four\"\n        }\n      },\n      \"negative_boost\": 0.5\n    }\n  },\n  \"_source\": [\"id\", \"title\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/tmdb/_search",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"tmdb",
										"_search"
									]
								},
								"description": "### boosting query\n\nboostring query 返回 postive 查询匹配的文档，并降低 negative 匹配文档的相关分数。你可以使用该查询降低某些文档的分数，而不会将它们从搜索结果中排除。\n\nboosting query 的三个顶级参数：\n\n- positive该查询返回匹配的文档\n- negative该查询降低匹配文档的相关分数\n- negative_boost\n    降低文档分数的浮点数权重值，介于 0 与 1 之间"
							},
							"response": []
						},
						{
							"name": "constant score query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"",
											"pm.test('constant score query successful', () => {",
											"    // 返回的文档分数都同 boost 一致",
											"    body.hits.hits.map(doc => doc._score)",
											"        .forEach(s => pm.expect(s).eq(1.2));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": {\n    \"constant_score\": {\n      \"filter\": {\n        \"terms\": {\n          \"id\": [5, 805]\n        }\n      },\n      \"boost\": 1.2\n    }\n  },\n  \"_source\": [\"id\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/tmdb/_search",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"tmdb",
										"_search"
									]
								},
								"description": "### constant score query\n\nconstant score query 是包装 filter query 的一类查询，查询返回的文档分数总是同 boost 参数一致。\n\n**查询参数：**\n\n- filter 所希望的 [Filter query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html) 查询\n- boost 返回文档的分数浮点值，默认为 1.0"
							},
							"response": []
						},
						{
							"name": "disjunction max query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const createDocument = eval(pm.globals.get(\"createDocument\"));",
											"const loadDatas = eval(pm.globals.get(\"loadDatas\"));",
											"const docs = {",
											"    'my-index-000001': [",
											"        {",
											"            id: 1, ",
											"            title: 'Quick brown rabbits', ",
											"            body: 'Brown rabbits are commonly seen'",
											"        },",
											"        {",
											"            id: 2,",
											"            title: 'Keeping pets healthy', ",
											"            body: 'My quick brown fox eats rabbits on a regular basis'",
											"        }",
											"    ]",
											"};",
											"",
											"asyncSeries([",
											"    cb => loadDatas(docs, cb, 1000)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
											"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
											"const body = pm.response.json();",
											"",
											"asyncSeries([",
											"    cb => deleteIndex('my-index-000001', cb)",
											"], (err, resp) => {",
											"    if (err) throw err;",
											"",
											"    pm.test('disjunction max query successful', () => {",
											"        let hits = body.hits.hits;",
											"",
											"        // 文档 1 中 title、body 字段各有 brown，按道理总分数更高",
											"        // 但是由于 dis_max 查询只取最高匹配的分数 + 其他匹配分数 * tie_breaker",
											"        // 所以由于文档 2 的 brown fox 单个匹配分数更高，所以文档总分数更高",
											"        // 故文档 2 的总分数比文档 1 高",
											"        pm.expect(hits[0]._source.id).eq(2);",
											"        pm.expect(hits[1]._source.id).eq(1);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": {\n    \"dis_max\": {\n      \"queries\": [\n        {\n          \"match\": {\n            \"title\": \"Brown fox\"\n          }\n        },\n        {\n          \"match\": {\n            \"body\": \"Brown fox\"\n          }\n        }\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esHost}}/my-index-000001/_search",
									"host": [
										"{{esHost}}"
									],
									"path": [
										"my-index-000001",
										"_search"
									]
								},
								"description": "### disjunction max query\n\n如果返回的文档被多个查询子句匹配，dis_max 查询返回的文档分数 = 最匹配子句的分数 + 其他查询子项分数 \\* tie_breaker。\n\n**查询参数：**\n\n- queries 一个或多个查询子句\n- tie_breaker 一个介于 0 和 1 的浮点数，用于增加匹配多个查询子句文档的相关性分数，默认为 0\n    \n\n官方文档：[https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-dis-max-query.html#query-dsl-dis-max-query](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-dis-max-query.html#query-dsl-dis-max-query)"
							},
							"response": []
						}
					]
				},
				{
					"name": "full text queries",
					"item": [
						{
							"name": "match",
							"item": [
								{
									"name": "match",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json();",
													"",
													"pm.test('match query successful', () => {",
													"    pm.expect(body.hits.hits.length).eq(1);",
													"",
													"    let title = body.hits.hits[0]._source.title.toLowerCase();",
													"",
													"    // 使用了 minimum_should_match 参数，",
													"    // 则返回的文档必须命中至少 3 个查询子句",
													"    pm.expect(title).to.be.contain('i');",
													"    pm.expect(title).to.be.contain('want');",
													"    pm.expect(title).to.be.contain('you');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"query\": {\n    \"match\": {\n      \"title\": {\n        \"query\": \"i want watch four child with you\",\n        \"operator\": \"or\",\n        \"minimum_should_match\": 3\n      }\n    }\n  },\n  \"_source\": [\"id\", \"title\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esHost}}/tmdb/_search",
											"host": [
												"{{esHost}}"
											],
											"path": [
												"tmdb",
												"_search"
											]
										},
										"description": "### match\n\n可以使用 operator 参数设置为 or 或 and 来控制查询逻辑。当为 or 时查询命中分词中任意一个的 token ，既可返回对应的文档。当为 and 时查询命中分词后的全部 token 才可以返回对应的文档。\n\n使用  [`minimum_should_match`](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-minimum-should-match.html) 参数可以指定最少匹配的 should 子句个数，具体参考演示样例。\n\n使用 analyzer 参数可以指定查询前对文本进行分析所用的分词器。默认使用字段 mapping 定义的分词器或者索引的默认分词器。"
									},
									"response": []
								},
								{
									"name": "match fuzziness",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json();",
													"",
													"/**",
													" * calculate levenshtein edit distance",
													" * ",
													" * @see https://stackoverflow.com/questions/18516942/fastest-general-purpose-levenshtein-javascript-implementation",
													" */",
													"function levenshtein(s, t) {",
													"    if (s === t) {",
													"        return 0;",
													"    }",
													"    var n = s.length, m = t.length;",
													"    if (n === 0 || m === 0) {",
													"        return n + m;",
													"    }",
													"    var x = 0, y, a, b, c, d, g, h;",
													"    var p = new Uint16Array(n);",
													"    var u = new Uint32Array(n);",
													"    for (y = 0; y < n;) {",
													"        u[y] = s.charCodeAt(y);",
													"        p[y] = ++y;",
													"    }",
													"",
													"    for (; (x + 3) < m; x += 4) {",
													"        var e1 = t.charCodeAt(x);",
													"        var e2 = t.charCodeAt(x + 1);",
													"        var e3 = t.charCodeAt(x + 2);",
													"        var e4 = t.charCodeAt(x + 3);",
													"        c = x;",
													"        b = x + 1;",
													"        d = x + 2;",
													"        g = x + 3;",
													"        h = x + 4;",
													"        for (y = 0; y < n; y++) {",
													"            a = p[y];",
													"            if (a < c || b < c) {",
													"                c = (a > b ? b + 1 : a + 1);",
													"            }",
													"            else {",
													"                if (e1 !== u[y]) {",
													"                    c++;",
													"                }",
													"            }",
													"",
													"            if (c < b || d < b) {",
													"                b = (c > d ? d + 1 : c + 1);",
													"            }",
													"            else {",
													"                if (e2 !== u[y]) {",
													"                    b++;",
													"                }",
													"            }",
													"",
													"            if (b < d || g < d) {",
													"                d = (b > g ? g + 1 : b + 1);",
													"            }",
													"            else {",
													"                if (e3 !== u[y]) {",
													"                    d++;",
													"                }",
													"            }",
													"",
													"            if (d < g || h < g) {",
													"                g = (d > h ? h + 1 : d + 1);",
													"            }",
													"            else {",
													"                if (e4 !== u[y]) {",
													"                    g++;",
													"                }",
													"            }",
													"            p[y] = h = g;",
													"            g = d;",
													"            d = b;",
													"            b = c;",
													"            c = a;",
													"        }",
													"    }",
													"",
													"    for (; x < m;) {",
													"        var e = t.charCodeAt(x);",
													"        c = x;",
													"        d = ++x;",
													"        for (y = 0; y < n; y++) {",
													"            a = p[y];",
													"            if (a < c || d < c) {",
													"                d = (a > d ? d + 1 : a + 1);",
													"            }",
													"            else {",
													"                if (e !== u[y]) {",
													"                    d = c + 1;",
													"                }",
													"                else {",
													"                    d = c;",
													"                }",
													"            }",
													"            p[y] = d;",
													"            c = a;",
													"        }",
													"        h = d;",
													"    }",
													"",
													"    return h;",
													"}",
													"",
													"pm.test('match fuzziness query successful', () => {",
													"    pm.expect(body.hits.hits.length).eq(1);",
													"",
													"    let title = body.hits.hits[0]._source.title.toLowerCase();",
													"    let tokens = title.split(' ');",
													"",
													"    // prefix_length 为 2，代表至少前缀 2 个字符一致",
													"    pm.expect(tokens[0].substring(0, 2)).eq('fourr'.substring(0, 2));",
													"    pm.expect(tokens[1].substring(0, 2)).eq('romms'.substring(0, 2));",
													"",
													"    // token 的编辑距离小于等于 2",
													"    pm.expect(levenshtein('fourr', 'four')).to.be.lte(2);",
													"    pm.expect(levenshtein('romms', 'room')).to.be.lte(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"query\": {\n        \"match\": {\n            \"title\": {\n                \"query\": \"Fourr romms\",\n                \"operator\": \"and\",\n                \"fuzziness\": \"AUTO:3,5\",\n                \"prefix_length\": 2\n            }\n        }\n    },\n    \"_source\": [\n        \"id\",\n        \"title\"\n    ],\n    \"profile\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esHost}}/tmdb/_search",
											"host": [
												"{{esHost}}"
											],
											"path": [
												"tmdb",
												"_search"
											]
										},
										"description": "### match fuzziness\n\nfuzziness 参数可以在 match 查询时模糊匹配对应的文档。比如查询文本为 'rooom' ，其可以匹配包含 'room' 单词的文档。\n\n可以使用 prefix_length 和 max_expansions 参数来控制模糊查询过程：\n\nprefix_length 参数可以指定不被模糊化的字符前缀长度，如：prefix_length 为 2 ，则 rale 不能模糊化为 rule，但可以模糊化为 raw。\n\nmax_expansions 参数可以指定最多被模糊匹配词的个数。\n\n参考文档： [https://www.elastic.co/cn/blog/found-fuzzy-search](https://www.elastic.co/cn/blog/found-fuzzy-search)"
									},
									"response": []
								},
								{
									"name": "zero terms query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json();",
													"",
													"pm.test('zero terms query succesful', () => {",
													"    // 当查询文本分词后得不到 token 时",
													"    // zero_term_query 设置为 all，查询效果与 match_all 一致",
													"    // 可以查看返回结果中的 profile 内容",
													"    pm.expect(body.hits.total.value).eq(3051);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"query\": {\n    \"match\": {\n      \"title\": {\n        \"query\": \"to be or not to be\",\n        \"analyzer\": \"stop\", \n        \"operator\": \"and\",\n        \"zero_terms_query\": \"all\"\n      }\n    }\n  },\n  \"_source\": [\"id\"],\n  \"profile\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esHost}}/tmdb/_search",
											"host": [
												"{{esHost}}"
											],
											"path": [
												"tmdb",
												"_search"
											]
										},
										"description": "### zero terms query\n\n当搜索文本被分词器过滤后没有任何查询 token，zero_terms_query 设置为 all 时，效果同 match_all ；设置为 none，则不返回任何文档。"
									},
									"response": []
								},
								{
									"name": "synonyms",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const createIndex = eval(pm.globals.get(\"createIndex\"));",
													"const createDocument = eval(pm.globals.get(\"createDocument\"));",
													"const indexOptions = {",
													"    \"indexName\": \"my-index-000001\",",
													"    \"settings\": {",
													"        \"index\" : {",
													"            \"analysis\" : {",
													"                \"analyzer\" : {",
													"                    \"synonym\" : {",
													"                        \"tokenizer\" : \"whitespace\",",
													"                        \"filter\" : [\"synonym\"]",
													"                    }",
													"                },",
													"                \"filter\" : {",
													"                    \"synonym\" : {",
													"                        \"type\" : \"synonym\",",
													"                        \"synonyms\" : [",
													"                            \"USA, united states of America\"",
													"                        ]",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    },",
													"    \"mappings\": {",
													"        \"properties\": {",
													"            \"message\": {",
													"                \"type\": \"text\",",
													"                \"analyzer\": \"synonym\"",
													"            }",
													"        }",
													"    }",
													"};",
													"const doc = {",
													"    \"indexName\": \"my-index-000001\",",
													"    \"id\": 1,",
													"    \"doc\": {",
													"        \"message\": \"united states of America people\"",
													"    }",
													"};",
													"",
													"asyncSeries([",
													"    cb => createIndex(indexOptions, cb),",
													"    cb => createDocument(doc, cb),",
													"    // wait 1 s",
													"    cb => setTimeout(cb, 1000)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
													"const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
													"const body = pm.response.json();",
													"",
													"asyncSeries([",
													"    cb => deleteIndex(\"my-index-000001\", cb)",
													"], (err, resp) => {",
													"    if (err) throw err;",
													"",
													"    pm.test('match synonyms successful', () => {",
													"        let message = body.hits.hits[0]._source.message;",
													"",
													"        // 由于 message 字段指定了 synonym 分词器",
													"        // 所以查询时 USA 会被转换为同义词 “united states of America people” 进行查询（见 profile）",
													"        // 所以可以查到对应的内容",
													"        pm.expect(body.hits.hits.length).eq(1);",
													"        pm.expect(message).eq('united states of America people');",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"query\": {\n        \"match\": {\n            \"message\": {\n                \"query\": \"USA\"\n            }\n        }\n    },\n    \"profile\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esHost}}/my-index-000001/_search",
											"host": [
												"{{esHost}}"
											],
											"path": [
												"my-index-000001",
												"_search"
											]
										},
										"description": "synonyms 是指同义词，只要索引和字段中配置了同义词过滤器，match 查询是支持多词条的同义词扩展的。在应用过滤器后，解析器会对每个多次条同义词创建一个语句查询"
									},
									"response": []
								}
							],
							"description": "### match\n\nmatch 是常用的全文搜索查询，包括可选的模糊（fuzzy）匹配，其在查询前会对查询文本进行分析（analyzed）。\n\n**查询参数**：\n\n- query 查询文本\n- analyzer 分词器，用于将查询文本转换为词（token）。默认使用字段上的分词器，如果没有则使用索引上的分词器\n- fuzziness 最大可匹配的编辑长度（edit distance）\n- max_expansions\n- prefox_length 不被模糊化的初始字符数量\n- lenient 如果为 true，查询数据不匹配且转换异常会报错\n- operator 查询时布尔逻辑，AND 代表匹配分词后的全部词，OR 代表匹配分词后的任意词\n- minimum_should_match 返回的文档至少匹配的查询子句\n- zero_terms_query 如果分词器过滤了所有词（toekn，例如查询文本全是停止词 ）时查询文档的策略，all 返回所有文档，none 不返回文档\n- ...\n    \n\n参考文档：\n\n- [Match query | Elasticsearch Guide \\[7.17\\] | Elastic](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-match-query.html)\n- [https://segmentfault.com/a/1190000017110948](https://segmentfault.com/a/1190000017110948)"
						}
					]
				}
			],
			"description": "运行此集合的请求前，请先上传本目录下的 tmdb.json 文件（该文件为数千部电影的详细信息，来自于 [https://www.themoviedb.org/](https://www.themoviedb.org/) ）。pre-request script 会将 json 数据加载到 es 中的 tmdb 索引中，以用于后续的查询请求。tests 会删除 tmdb 索引以用于后续的重复测试（如果你想查看 tmdb 索引中的数据，只需将 tests 中的代码注释既可）。",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
							"// const createIndex = eval(pm.globals.get(\"createIndex\")); ",
							"// const indexName = 'tmdb';",
							"// const indexOptions = {",
							"//     indexName,",
							"//     \"settings\": {",
							"//         \"number_of_shards\": 1",
							"//     },",
							"//     \"mappings\": {",
							"//         \"properties\": {",
							"//             \"overview\": {",
							"//                 \"type\": \"text\",",
							"//                 \"analyzer\": \"english\",",
							"//                 \"fields\": {",
							"//                     \"std\": {",
							"//                         \"type\": \"text\",",
							"//                         \"analyzer\": \"standard\"",
							"//                     }",
							"//                 }",
							"//             },",
							"//             \"popularity\": {",
							"//                 \"type\": \"float\"",
							"//             },",
							"//             \"title\": {",
							"//                 \"type\": \"text\",",
							"//                 \"analyzer\": \"english\",",
							"//                 \"fields\": {",
							"//                     \"keyword\": {",
							"//                         \"type\": \"keyword\",",
							"//                         \"ignore_above\": 256",
							"//                     }",
							"//                 }",
							"//             }",
							"//         }",
							"//     }",
							"// };",
							"",
							"// function importData2es(indexName, datas, cb) {",
							"//     // datas 不是数组，手动计算总数",
							"//     let count = 0;",
							"//     let bulkBody = datas.map(data => {",
							"//         ++count;",
							"//         return  `{\"index\": {\"_index\": \"${indexName}\", \"_id\": ${data.key} }}\\n${JSON.stringify(data.value)}\\n`;",
							"//     })",
							"//     .join('');",
							"",
							"//     pm.sendRequest({",
							"//         url: `${pm.collectionVariables.get('esHost')}/${indexName}/_bulk`,",
							"//         method: 'POST',",
							"//         header: {",
							"//             'Content-Type': 'application/json'",
							"//         },",
							"//         body: {",
							"//             mode: 'raw',",
							"//             raw: bulkBody",
							"//         }",
							"//     }, (err, resp) => {",
							"//         if (err) throw err;",
							"",
							"//         let respBody = resp.json();",
							"",
							"//         if (respBody.status < 200 || ",
							"//                 respBody.status >= 300 ||",
							"//                 respBody.errors) ",
							"//             throw new Error('批量导入数据失败');",
							"",
							"//         cb(null, count);",
							"//     });",
							"// }",
							"",
							"// function setup() {",
							"//     let externalData = pm.iterationData.values;",
							"//     let startMills = new Date().getTime();",
							"",
							"//     if (!externalData) {",
							"//         throw new Error('请先导入 tmdb.json 文件');",
							"//     }",
							"",
							"//     asyncSeries([",
							"//         // 创建 tmdb 索引",
							"//         cb => createIndex(indexOptions, cb),",
							"//         // 将导入的 json 数据写入到索引中",
							"//         cb => importData2es(indexName, externalData, cb)",
							"//     ], (err, resp) => {",
							"//         if (err) throw err;",
							"",
							"//         let endMillis = new Date().getTime();",
							"",
							"//         console.log(`创建 ${indexName} 索引成功`);",
							"//         console.log(`共往 ${indexName} 索引导入了 ${resp[1]} 条数据，耗时 ${(endMillis - startMills) / 1000} ms`);",
							"//     });",
							"// }",
							"",
							"// setup();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// const asyncSeries = eval(pm.globals.get(\"asyncSeries\"));",
							"// const deleteIndex = eval(pm.globals.get(\"deleteIndex\"));",
							"",
							"// asyncSeries([",
							"//     cb => deleteIndex('tmdb', cb)",
							"// ], (err, resp) => {",
							"//     if (err) throw err;",
							"// });"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const elasticsearchHost = 'http://localhost:9200';",
					"const elasticsearchVersion = '7.17.0';",
					"",
					"// set global varibales",
					"pm.collectionVariables.set('esHost', elasticsearchHost);",
					"pm.collectionVariables.set('esVersion', elasticsearchVersion);",
					"",
					"// set default header",
					"pm.request.headers.add({key: 'Content-type', value: 'application/json'});",
					"",
					"// global functions",
					"// see also: https://www.postman.com/postman/workspace/postman-answers/request/3407886-06011115-e3cf-4711-926c-55a417d530f1",
					"let asyncSeries = (tasks, cb = () => {}) => {",
					"    let _series = function(tasks, cb, currOperation = 0, results = []) {",
					"        // Bail-out condition",
					"        if (currOperation === tasks.length) {",
					"            return cb(null, results);",
					"        }",
					"",
					"        if (typeof tasks[currOperation] !== 'function') {",
					"            return cb(new Error('asyncSeries: Please provide a function'));",
					"        }",
					"",
					"        tasks[currOperation]((err, res) => {",
					"            if (err) {",
					"                return cb(err);",
					"            }",
					"",
					"            results.push(res);",
					"            ",
					"            return _series(tasks, cb, currOperation + 1, results);",
					"        });",
					"    }",
					"",
					"    return _series(tasks, cb);",
					"};",
					"",
					"let deleteIndex = (indexName, callback) => {",
					"   pm.sendRequest({",
					"        url: `${pm.collectionVariables.get('esHost')}/${indexName}`,",
					"        method: 'DELETE'",
					"    }, (err, resp) => {",
					"        if (err) return callback(err);",
					"",
					"        let body = resp.json();",
					"",
					"        callback(",
					"            body.acknowledged ? ",
					"                null : ",
					"                new Error(`${indexName} 索引删除失败`),",
					"            body.acknowledged",
					"        );",
					"    });",
					"};",
					"",
					"let createIndex = (options, callback) => {",
					"    let indexName = options.indexName;",
					"    ",
					"    delete options.indexName;",
					"",
					"    pm.sendRequest({",
					"        url: `${pm.collectionVariables.get('esHost')}/${indexName}`,",
					"        method: 'PUT',",
					"        header: {",
					"            'Content-Type': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify(options)",
					"        }",
					"    }, (err, resp) => {",
					"        if (err) return callback(err);",
					"",
					"        let body = resp.json();",
					"",
					"        callback(",
					"            body.acknowledged ? ",
					"                null : ",
					"                new Error(`${indexName} 索引创建失败`),",
					"            body.acknowledged",
					"        );",
					"    });",
					"};",
					"",
					"let getIndex = (indexName, callback) => {",
					"    pm.sendRequest({",
					"        url: `${pm.collectionVariables.get('esHost')}/${indexName}`,",
					"        method: 'GET'",
					"    }, (err, resp) => {",
					"        if (err) return callback(err);",
					"",
					"        callback(null, resp.json());",
					"    });",
					"};",
					"",
					"let createDocument = (options, callback) => {",
					"    pm.sendRequest({",
					"        url: `${pm.collectionVariables.get('esHost')}/${options.indexName}/_doc/${options.id ? options.id : ''}`,",
					"        method: 'POST',",
					"        header: {",
					"            'Content-Type': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify(options.doc)",
					"        }",
					"    }, (err, resp) => {",
					"        if (err) return callback(err);",
					"",
					"        let body = resp.json();",
					"",
					"        callback(null, body.result === 'created');",
					"    });",
					"};",
					"",
					"let getDocumentById = (options, callback) => {",
					"    pm.sendRequest({",
					"        url: `${pm.collectionVariables.get('esHost')}/${options.indexName}/_doc/${options.id}`,",
					"        method: 'GET',",
					"    }, (err, resp) => {",
					"        if (err) return callback(err);",
					"",
					"        callback(null, resp.json());",
					"    });",
					"};",
					"",
					"let searchDocument = (indexName, dsl, callback) => {",
					"    pm.sendRequest({",
					"        url: `${pm.collectionVariables.get('esHost')}/${indexName}/_search`,",
					"        method: 'POST',",
					"        header: {",
					"            'Content-Type': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify(dsl)",
					"        }",
					"    }, (err, resp) => {",
					"        if (err) return callback(err);",
					"",
					"        callback(null, resp.json());",
					"    });",
					"};",
					"",
					"let loadDatas = (datas, callback, sleepmillis) => {",
					"    let tasks = Object.entries(datas)",
					"        .flatMap(([k, v]) => ",
					"            v.map(data => ",
					"                _cb => createDocument({indexName: k, doc: data}, _cb)",
					"            )",
					"        );",
					"",
					"    // 部分数据创建后需等待若干毫秒后才可以被查询到",
					"    if (sleepmillis && sleepmillis > 0) {",
					"        tasks.push(_cb => setTimeout(_cb, sleepmillis));",
					"    }",
					"",
					"    asyncSeries(tasks, callback);",
					"};",
					"",
					"// set global function",
					"postman.setGlobalVariable('asyncSeries', asyncSeries);",
					"postman.setGlobalVariable('createIndex', createIndex);",
					"postman.setGlobalVariable('getIndex', getIndex);",
					"postman.setGlobalVariable('deleteIndex', deleteIndex);",
					"postman.setGlobalVariable('createDocument', createDocument);",
					"postman.setGlobalVariable('getDocumentById', getDocumentById);",
					"postman.setGlobalVariable('searchDocument', searchDocument);",
					"postman.setGlobalVariable('loadDatas', loadDatas);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "esHost",
			"value": ""
		},
		{
			"key": "esVersion",
			"value": ""
		}
	]
}